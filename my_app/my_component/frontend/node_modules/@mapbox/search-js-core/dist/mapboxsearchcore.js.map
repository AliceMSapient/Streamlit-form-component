{
  "version": 3,
  "sources": ["../../../node_modules/mersenne-twister/src/mersenne-twister.js", "../../../node_modules/polyfill-crypto.getrandomvalues/index.js", "../src/index.ts", "../src/search/constants.ts", "../src/LngLat.ts", "../src/LngLatBounds.ts", "../src/utils/uuid.ts", "../src/SessionToken.ts", "../src/MapboxError.ts", "../src/fetch.ts", "../src/utils/queryParams.ts", "../src/search/MapboxSearch.ts", "../src/autofill/constants.ts", "../src/autofill/MapboxAutofill.ts", "../src/autofill/types.ts", "../src/utils/Evented.ts", "../src/utils/debounce.ts", "../src/SearchSession.ts", "../src/featureToSuggestion.ts"],
  "sourcesContent": ["/*\n  https://github.com/banksean wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace\n  so it's better encapsulated. Now you can have multiple random number generators\n  and they won't stomp all over eachother's state.\n\n  If you want to use this as a substitute for Math.random(), use the random()\n  method like so:\n\n  var m = new MersenneTwister();\n  var randomNumber = m.random();\n\n  You can also call the other genrand_{foo}() methods on the instance.\n\n  If you want to use a specific seed in order to get a repeatable random\n  sequence, pass an integer into the constructor:\n\n  var m = new MersenneTwister(123);\n\n  and that will always produce the same random sequence.\n\n  Sean McCullough (banksean@gmail.com)\n*/\n\n/*\n   A C-program for MT19937, with initialization improved 2002/1/26.\n   Coded by Takuji Nishimura and Makoto Matsumoto.\n\n   Before using, initialize the state by using init_seed(seed)\n   or init_by_array(init_key, key_length).\n\n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n\n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n\n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n     3. The names of its contributors may not be used to endorse or promote\n        products derived from this software without specific prior written\n        permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n   Any feedback is very welcome.\n   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\n   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n*/\n\nvar MersenneTwister = function(seed) {\n\tif (seed == undefined) {\n\t\tseed = new Date().getTime();\n\t}\n\n\t/* Period parameters */\n\tthis.N = 624;\n\tthis.M = 397;\n\tthis.MATRIX_A = 0x9908b0df;   /* constant vector a */\n\tthis.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n\tthis.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n\tthis.mt = new Array(this.N); /* the array for the state vector */\n\tthis.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\n\n\tif (seed.constructor == Array) {\n\t\tthis.init_by_array(seed, seed.length);\n\t}\n\telse {\n\t\tthis.init_seed(seed);\n\t}\n}\n\n/* initializes mt[N] with a seed */\n/* origin name init_genrand */\nMersenneTwister.prototype.init_seed = function(s) {\n\tthis.mt[0] = s >>> 0;\n\tfor (this.mti=1; this.mti<this.N; this.mti++) {\n\t\tvar s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\n\t\tthis.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n\t\t+ this.mti;\n\t\t/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n\t\t/* In the previous versions, MSBs of the seed affect   */\n\t\t/* only MSBs of the array mt[].                        */\n\t\t/* 2002/01/09 modified by Makoto Matsumoto             */\n\t\tthis.mt[this.mti] >>>= 0;\n\t\t/* for >32 bit machines */\n\t}\n}\n\n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nMersenneTwister.prototype.init_by_array = function(init_key, key_length) {\n\tvar i, j, k;\n\tthis.init_seed(19650218);\n\ti=1; j=0;\n\tk = (this.N>key_length ? this.N : key_length);\n\tfor (; k; k--) {\n\t\tvar s = this.mt[i-1] ^ (this.mt[i-1] >>> 30)\n\t\tthis.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n\t\t+ init_key[j] + j; /* non linear */\n\t\tthis.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n\t\ti++; j++;\n\t\tif (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n\t\tif (j>=key_length) j=0;\n\t}\n\tfor (k=this.N-1; k; k--) {\n\t\tvar s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n\t\tthis.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\n\t\t- i; /* non linear */\n\t\tthis.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n\t\ti++;\n\t\tif (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n\t}\n\n\tthis.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n}\n\n/* generates a random number on [0,0xffffffff]-interval */\n/* origin name genrand_int32 */\nMersenneTwister.prototype.random_int = function() {\n\tvar y;\n\tvar mag01 = new Array(0x0, this.MATRIX_A);\n\t/* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n\tif (this.mti >= this.N) { /* generate N words at one time */\n\t\tvar kk;\n\n\t\tif (this.mti == this.N+1)  /* if init_seed() has not been called, */\n\t\t\tthis.init_seed(5489);  /* a default initial seed is used */\n\n\t\tfor (kk=0;kk<this.N-this.M;kk++) {\n\t\t\ty = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n\t\t\tthis.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n\t\t}\n\t\tfor (;kk<this.N-1;kk++) {\n\t\t\ty = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n\t\t\tthis.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n\t\t}\n\t\ty = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n\t\tthis.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n\t\tthis.mti = 0;\n\t}\n\n\ty = this.mt[this.mti++];\n\n\t/* Tempering */\n\ty ^= (y >>> 11);\n\ty ^= (y << 7) & 0x9d2c5680;\n\ty ^= (y << 15) & 0xefc60000;\n\ty ^= (y >>> 18);\n\n\treturn y >>> 0;\n}\n\n/* generates a random number on [0,0x7fffffff]-interval */\n/* origin name genrand_int31 */\nMersenneTwister.prototype.random_int31 = function() {\n\treturn (this.random_int()>>>1);\n}\n\n/* generates a random number on [0,1]-real-interval */\n/* origin name genrand_real1 */\nMersenneTwister.prototype.random_incl = function() {\n\treturn this.random_int()*(1.0/4294967295.0);\n\t/* divided by 2^32-1 */\n}\n\n/* generates a random number on [0,1)-real-interval */\nMersenneTwister.prototype.random = function() {\n\treturn this.random_int()*(1.0/4294967296.0);\n\t/* divided by 2^32 */\n}\n\n/* generates a random number on (0,1)-real-interval */\n/* origin name genrand_real3 */\nMersenneTwister.prototype.random_excl = function() {\n\treturn (this.random_int() + 0.5)*(1.0/4294967296.0);\n\t/* divided by 2^32 */\n}\n\n/* generates a random number on [0,1) with 53-bit resolution*/\n/* origin name genrand_res53 */\nMersenneTwister.prototype.random_long = function() {\n\tvar a=this.random_int()>>>5, b=this.random_int()>>>6;\n\treturn(a*67108864.0+b)*(1.0/9007199254740992.0);\n}\n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\nmodule.exports = MersenneTwister;\n", "var MersenneTwister = require('mersenne-twister')\n\nvar twister = new MersenneTwister(Math.random()*Number.MAX_SAFE_INTEGER)\n\nmodule.exports = getRandomValues\n\n\nfunction getRandomValues (abv) {\n  var l = abv.length\n  while (l--) {\n    abv[l] = Math.floor(randomFloat() * 256)\n  }\n  return abv\n}\n\nfunction randomFloat() {\n  return twister.random()\n}", "import {\n  Options,\n  MapboxSearch,\n  SuggestionResponse,\n  RetrieveResponse\n} from './search/MapboxSearch';\nimport {\n  AdministrativeUnitTypes,\n  Suggestion,\n  FeatureSuggestion\n} from './search/types';\n\nimport {\n  AutofillOptions,\n  MapboxAutofill,\n  AutofillSuggestionResponse,\n  AutofillRetrieveResponse\n} from './autofill/MapboxAutofill';\nimport {\n  AutofillSuggestion,\n  AutofillFeatureSuggestion,\n  AutofillMatchCode,\n  AutofillMatchCodeConfidence\n} from './autofill/types';\n\nimport { SearchSession } from './SearchSession';\nimport { SessionToken, SessionTokenLike } from './SessionToken';\nimport { MapboxError } from './MapboxError';\n\nimport { LngLat, LngLatLike } from './LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from './LngLatBounds';\n\nimport { polyfillFetch } from './fetch';\nimport { featureToSuggestion } from './featureToSuggestion';\n\nimport { Evented } from './utils/Evented';\n\nexport {\n  Options,\n  MapboxSearch,\n  SuggestionResponse,\n  RetrieveResponse,\n  Suggestion,\n  FeatureSuggestion,\n  AutofillOptions,\n  MapboxAutofill,\n  AutofillSuggestionResponse,\n  AutofillRetrieveResponse,\n  AutofillSuggestion,\n  AutofillFeatureSuggestion,\n  AutofillMatchCode,\n  AutofillMatchCodeConfidence,\n  AdministrativeUnitTypes,\n  SearchSession,\n  SessionToken,\n  SessionTokenLike,\n  MapboxError,\n  LngLat,\n  LngLatLike,\n  LngLatBounds,\n  LngLatBoundsLike,\n  polyfillFetch,\n  featureToSuggestion,\n  Evented\n};\n", "export const SEARCH_URL = `https://api.mapbox.com/search/v1`;\n\nexport const ENDPOINT_SUGGEST = 'suggest';\nexport const ENDPOINT_RETRIEVE = 'retrieve';\nexport const ENDPOINT_FORWARD = 'forward';\nexport const ENDPOINT_REVERSE = 'reverse';\n\nexport const SUGGEST_URL = `${SEARCH_URL}/${ENDPOINT_SUGGEST}`;\nexport const RETRIEVE_URL = `${SEARCH_URL}/${ENDPOINT_RETRIEVE}`;\n\nexport const FORWARD_URL = `${SEARCH_URL}/${ENDPOINT_FORWARD}`;\nexport const PERMANENT_FORWARD_URL = `${SEARCH_URL}/permanent/${ENDPOINT_FORWARD}`;\n\nexport const REVERSE_URL = `${SEARCH_URL}/${ENDPOINT_REVERSE}`;\nexport const PERMANENT_REVERSE_URL = `${SEARCH_URL}/permanent/${ENDPOINT_REVERSE}`;\n", "/**\n * A `LngLat` object represents a given longitude and latitude coordinate, measured in degrees.\n * These coordinates use longitude, latitude coordinate order (as opposed to latitude, longitude)\n * to match the [GeoJSON specification](https://datatracker.ietf.org/doc/html/rfc7946#section-4),\n * which is equivalent to the OGC:CRS84 coordinate reference system.\n *\n * Note that any method that accepts a `LngLat` object as an argument or option\n * can also accept an `Array` of two numbers and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatLike}.\n *\n * @class LngLat\n * @param lng - Longitude, measured in degrees.\n * @param lat - Latitude, measured in degrees.\n * @example\n * ```typescript\n * const ll = new LngLat(-123.9749, 40.7736);\n * console.log(ll.lng); // = -123.9749\n * ```\n */\nexport class LngLat {\n  /**\n   * @name lng\n   * @instance\n   * @memberof LngLat\n   */\n  readonly lng: number;\n  /**\n   * @name lat\n   * @instance\n   * @memberof LngLat\n   */\n  readonly lat: number;\n\n  constructor(lng: number, lat: number) {\n    if (isNaN(lng) || isNaN(lat)) {\n      throw new Error(`Invalid LngLat object: (${lng}, ${lat})`);\n    }\n    this.lng = +lng;\n    this.lat = +lat;\n    if (this.lat > 90 || this.lat < -90) {\n      throw new Error(\n        'Invalid LngLat latitude value: must be between -90 and 90'\n      );\n    }\n    if (this.lng > 180 || this.lng < -180) {\n      throw new Error(\n        'Invalid LngLat longitude value: must be between -180 and 180'\n      );\n    }\n  }\n\n  /**\n   * Returns the coordinates represented as an array of two numbers.\n   *\n   * @returns The coordinates represeted as an array of longitude and latitude.\n   * @example\n   * ```typescript\n   * const ll = new LngLat(-73.9749, 40.7736);\n   * ll.toArray(); // = [-73.9749, 40.7736]\n   * ```\n   */\n  toArray(): [number, number] {\n    return [this.lng, this.lat];\n  }\n\n  /**\n   * Returns the coordinates represent as a string.\n   *\n   * @returns The coordinates represented as a string of the format `'LngLat(lng, lat)'`.\n   * @example\n   * ```typescript\n   * const ll = new LngLat(-73.9749, 40.7736);\n   * ll.toString(); // = \"LngLat(-73.9749, 40.7736)\"\n   * ```\n   */\n  toString(): string {\n    return `LngLat(${this.lng}, ${this.lat})`;\n  }\n\n  /**\n   * Converts an array of two numbers or an object with `lng` and `lat` or `lon` and `lat` properties\n   * to a `LngLat` object.\n   *\n   * If a `LngLat` object is passed in, the function returns a copy.\n   *\n   * @param input - An array of two numbers or object to convert, or a `LngLat` object to return.\n   * @returns A new `LngLat` object, if a conversion occurred, or the original `LngLat` object.\n   * @example\n   * ```typescript\n   * const arr = [-73.9749, 40.7736];\n   * const ll = LngLat.convert(arr);\n   * console.log(ll);   // = LngLat {lng: -73.9749, lat: 40.7736}\n   * ```\n   */\n  static convert(\n    input:\n      | LngLat\n      | { lng: number; lat: number }\n      | { lon: number; lat: number }\n      | [number, number]\n  ): LngLat {\n    // Make a copy if already an LngLat.\n    if (input instanceof LngLat) {\n      return new LngLat(input.lng, input.lat);\n    }\n\n    if (Array.isArray(input) && input.length === 2) {\n      return new LngLat(Number(input[0]), Number(input[1]));\n    }\n\n    if (\n      !Array.isArray(input) &&\n      typeof input == 'object' &&\n      input !== null &&\n      ('lng' in input || 'lon' in input) &&\n      'lat' in input\n    ) {\n      return new LngLat(\n        Number('lng' in input ? input.lng : input.lon),\n        Number(input.lat)\n      );\n    }\n\n    throw new Error(\n      '`LngLatLike` argument must be specified as an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]'\n    );\n  }\n}\n\n/**\n * A {@link LngLat} object, an array of two numbers representing longitude and latitude,\n * or an object with `lng` and `lat` or `lon` and `lat` properties.\n *\n * @typedef LngLatLike\n * @type {LngLat | [number, number] | { lng: number, lat: number } | { lon: number, lat: number }}\n * @example\n * ```typescript\n * const v1 = new LngLat(-122.420679, 37.772537);\n * const v2 = [-122.420679, 37.772537];\n * const v3 = {lon: -122.420679, lat: 37.772537};\n * ```\n */\nexport type LngLatLike =\n  | LngLat\n  | { lng: number; lat: number }\n  | { lon: number; lat: number }\n  | [number, number];\n", "import { LngLat, LngLatLike } from './LngLat';\n\n/**\n * A `LngLatBounds` object represents a geographical bounding box,\n * defined by its southwest and northeast points in longitude and latitude.\n *\n * Note that any method that accepts a `LngLatBounds` object as an argument or option\n * can also accept an `Array` of two {@link LngLatLike} constructs and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatBoundsLike}.\n *\n * @class LngLatBounds\n */\nexport class LngLatBounds {\n  private _ne: LngLat;\n  private _sw: LngLat;\n\n  /**\n   * @param sw - The southwest corner of the bounding box.\n   * @param ne - The northeast corner of the bounding box.\n   * @example\n   * ```typescript\n   * const sw = new LngLat(-73.9876, 40.7661);\n   * const ne = new LngLat(-73.9397, 40.8002);\n   * const llb = new LngLatBounds(sw, ne);\n   * ```\n   */\n  constructor(sw: LngLatLike, ne: LngLatLike) {\n    this._sw = LngLat.convert(sw);\n    this._ne = LngLat.convert(ne);\n  }\n\n  /**\n   * Returns the southwest corner of the bounding box.\n   *\n   * @returns The southwest corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getSouthWest(); // LngLat {lng: -73.9876, lat: 40.7661}\n   * ```\n   */\n  getSouthWest(): LngLat {\n    return this._sw;\n  }\n\n  /**\n   * Returns the northeast corner of the bounding box.\n   *\n   * @returns The northeast corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getNorthEast(); // LngLat {lng: -73.9397, lat: 40.8002}\n   * ```\n   */\n  getNorthEast(): LngLat {\n    return this._ne;\n  }\n\n  /**\n   * Returns the northwest corner of the bounding box. This is commonly used\n   * as the 'min' point in the bounding box.\n   *\n   * @returns The northwest corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getNorthWest(); // LngLat {lng: -73.9876, lat: 40.8002}\n   * ```\n   */\n  getNorthWest(): LngLat {\n    return new LngLat(this.getWest(), this.getNorth());\n  }\n\n  /**\n   * Returns the southeast corner of the bounding box. This is commonly used\n   * as the 'max' point in the bounding box.\n   *\n   * @returns The southeast corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getSouthEast(); // LngLat {lng: -73.9397, lat: 40.7661}\n   * ```\n   */\n  getSouthEast(): LngLat {\n    return new LngLat(this.getEast(), this.getSouth());\n  }\n\n  /**\n   * Returns the west edge of the bounding box.\n   *\n   * @returns The west edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getWest(); // -73.9876\n   * ```\n   */\n  getWest(): number {\n    return this._sw.lng;\n  }\n\n  /**\n   * Returns the south edge of the bounding box.\n   *\n   * @returns The south edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getSouth(); // 40.7661\n   * ```\n   */\n  getSouth(): number {\n    return this._sw.lat;\n  }\n\n  /**\n   * Returns the east edge of the bounding box.\n   *\n   * @returns The east edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getEast(); // -73.9397\n   * ```\n   */\n  getEast(): number {\n    return this._ne.lng;\n  }\n\n  /**\n   * Returns the north edge of the bounding box.\n   *\n   * @returns The north edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getNorth(); // 40.8002\n   * ```\n   */\n  getNorth(): number {\n    return this._ne.lat;\n  }\n\n  /**\n   * Returns the bounding box represented as an array.\n   *\n   * @returns The bounding box represented as an array, consisting of the\n   *   southwest and northeast coordinates of the bounding represented as arrays of numbers.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]\n   * ```\n   */\n  toArray(): [[number, number], [number, number]] {\n    return [this._sw.toArray(), this._ne.toArray()];\n  }\n\n  /**\n   * Returns the bounding box represented as a flattened array.\n   *\n   * @returns The bounding box represented as an array of numbers in [west, south, east, north] order.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toFlatArray(); // = [-73.9876, 40.7661, -73.9397, 40.8002]\n   * ```\n   */\n  toFlatArray(): [number, number, number, number] {\n    return [this._sw.lng, this._sw.lat, this._ne.lng, this._ne.lat];\n  }\n\n  /**\n   * Return the bounding box represented as a string.\n   *\n   * @returns The bounding box represents as a string of the format\n   *   `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"\n   * ```\n   */\n  toString(): string {\n    return `LngLatBounds(${this._sw.toString()}, ${this._ne.toString()})`;\n  }\n\n  /**\n   * Converts an array to a `LngLatBounds` object.\n   *\n   * If a `LngLatBounds` object is passed in, the function returns a copy.\n   *\n   * Internally, the function calls `LngLat#convert` to convert arrays to `LngLat` values.\n   *\n   * @param input - An array of two coordinates to convert, or a `LngLatBounds` object to return.\n   * @returns A new `LngLatBounds` object, if a conversion occurred, or the original `LngLatBounds` object.\n   * @example\n   * ```typescript\n   * const arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n   * const llb = LngLatBounds.convert(arr);\n   * console.log(llb);   // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}\n   * ```\n   */\n  static convert(\n    input:\n      | LngLatBounds\n      | [LngLatLike, LngLatLike]\n      | [number, number, number, number]\n  ): LngLatBounds {\n    if (!input) {\n      throw new Error('Invalid LngLatBounds convert value: falsy');\n    }\n\n    // Make a copy if already an LngLatBounds.\n    if (input instanceof LngLatBounds) {\n      return new LngLatBounds(input.getSouthWest(), input.getNorthEast());\n    }\n\n    if (Array.isArray(input) && input.length === 2) {\n      return new LngLatBounds(\n        LngLat.convert(input[0]),\n        LngLat.convert(input[1])\n      );\n    }\n\n    if (Array.isArray(input) && input.length === 4) {\n      return new LngLatBounds(\n        LngLat.convert([input[0], input[1]]),\n        LngLat.convert([input[2], input[3]])\n      );\n    }\n\n    throw new Error(\n      '`LngLatBoundsLike` argument must be specified as an array [<LngLatLike>, <LngLatLike>] or an array [<west>, <south>, <east>, <north>]'\n    );\n  }\n}\n\n/**\n * A {@link LngLatBounds} object, an array of {@link LngLatLike} objects in [sw, ne] order,\n * or an array of numbers in [west, south, east, north] order.\n *\n * @typedef LngLatBoundsLike\n * @type {LngLatBounds | [LngLatLike, LngLatLike] | [number, number, number, number]}\n * @example\n * ```typescript\n * const v1 = new LngLatBounds(\n *   new LngLat(-73.9876, 40.7661),\n *   new LngLat(-73.9397, 40.8002)\n * );\n * const v2 = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n * const v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n * ```\n */\nexport type LngLatBoundsLike =\n  | LngLatBounds\n  | [LngLatLike, LngLatLike]\n  | [number, number, number, number];\n", "import getRandomValuesPolyfill from 'polyfill-crypto.getrandomvalues';\n\n/**\n * `getRandomValues` is supported on all browsers and Node.js 15+.\n *\n * If our target is **not** one of these platforms, use a semi-secure polyfill.\n *\n * IMPORTANT: THIS IS NOT CRYPTO-GRAPHICALLY SECURE!\n *\n * Since we're using this to generate a random UUID, essentially as an SKU,\n * we don't need to worry about the randomness of the values as much.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n * @see https://github.com/uuidjs/uuid/issues/416\n */\nfunction getRandomValues<T extends ArrayBufferView | null>(arr: T): T {\n  if (\n    typeof globalThis.crypto === 'undefined' ||\n    typeof globalThis.crypto.getRandomValues !== 'function'\n  ) {\n    return getRandomValuesPolyfill(arr);\n  }\n\n  return globalThis.crypto.getRandomValues(arr);\n}\n\n// Copyright 2018-2021 the Deno authors. All rights reserved. MIT license.\n\n/**\n * Converts the byte array to a UUID string\n * @param bytes - Used to convert Byte to Hex\n */\nexport function bytesToUuid(bytes: number[] | Uint8Array): string {\n  const bits = [...bytes].map((bit) => {\n    const s = bit.toString(16);\n    return bit < 0x10 ? '0' + s : s;\n  });\n  return [\n    ...bits.slice(0, 4),\n    '-',\n    ...bits.slice(4, 6),\n    '-',\n    ...bits.slice(6, 8),\n    '-',\n    ...bits.slice(8, 10),\n    '-',\n    ...bits.slice(10, 16)\n  ].join('');\n}\n\nconst UUID_RE =\n  /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n/**\n * Validates the UUID v4.\n * @param id - UUID value.\n */\nexport function validateUUID(id: string): boolean {\n  return UUID_RE.test(id);\n}\n\n/** Generates a RFC4122 v4 UUID (pseudo-randomly-based) */\nexport function generateUUID(): string {\n  const rnds = getRandomValues(new Uint8Array(16));\n\n  rnds[6] = (rnds[6] & 0x0f) | 0x40; // Version 4\n  rnds[8] = (rnds[8] & 0x3f) | 0x80; // Variant 10\n\n  return bytesToUuid(rnds);\n}\n", "import { generateUUID } from './utils/uuid';\n\nconst SESSION_TOKEN_EXPIRY = 60 * 60 * 1000; // 60 minutes\n\n/**\n * A `SessionToken` object is a unique identifier that groups together `suggest` / `retrieve` calls as part of the\n * [Mapbox Search API](https://docs.mapbox.com/api/search/search/#retrieve-a-suggestion).\n *\n * Session tokens are used for [billing](https://docs.mapbox.com/api/search/search/#search-api-pricing) and\n * customer-accessible analytics.\n *\n * A [UUIDv4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) value is recommended,\n * and is generated if an `id` is not provided.\n *\n * Note that any method that accepts a `SessionToken` object as an argument or option\n * can also accept a unique `string` and will perform an implicit conversion.\n * This flexible type is documented as {@link SessionTokenLike}.\n *\n * @name SessionToken\n * @example\n * ```typescript\n * const token = new SessionToken();\n * console.log(token.id); // = I am a UUIDv4 value!\n * ```\n */\nexport class SessionToken {\n  /**\n   * The session token in string format.\n   */\n  readonly id: string;\n  /**\n   * Returns the timestamp of when the session token was initialized.\n   */\n  readonly ts: number;\n\n  constructor(id?: string, ts: number = Date.now()) {\n    this.id = id ?? generateUUID();\n    this.ts = ts;\n  }\n\n  /**\n   * Returns the session token in string format.\n   *\n   * This is the same as calling `token.id`, and is okay to be used for serialization.\n   */\n  toString(): string {\n    return this.id;\n  }\n\n  /**\n   * Converts a string to a `SessionToken` object.\n   *\n   * If a `SessionToken` object is passed in, the function returns a copy.\n   */\n  static convert(token: SessionToken | string): SessionToken {\n    return new SessionToken(\n      token instanceof SessionToken ? token.id : token.toString(),\n      token instanceof SessionToken ? token.ts : Date.now()\n    );\n  }\n\n  /**\n   * Returns `true` if the session token has expired (expired after 60 minutes).\n   */\n  isExpired(): boolean {\n    return Date.now() - this.ts > SESSION_TOKEN_EXPIRY;\n  }\n}\n\n/**\n * A {@link SessionToken} object or string representing a Mapbox Search API session token.\n *\n * It's recommended this value is a [UUIDv4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) value.\n *\n * @typedef SessionTokenLike\n * @type {SessionToken | string}\n * @example\n * const v1 = new SessionToken();\n * const v2 = new SessionToken('f06e7531-6373-4d5a-8614-b6f313488050');\n * const v3 = 'f06e7531-6373-4d5a-8614-b6f313488050';\n */\nexport type SessionTokenLike = string | SessionToken;\n", "export const UNKNOWN_ERROR = 'Unknown error';\n\n/**\n * Thrown from Search JS Core functions when a network request fails.\n *\n * See common errors here:\n * - [MapboxSearch](https://docs.mapbox.com/api/search/search/#search-api-errors)\n * - [MapboxAutofill](https://docs.mapbox.com/api/search/geocoding/#geocoding-api-errors)\n */\nexport class MapboxError extends Error {\n  readonly statusCode: number;\n\n  constructor(json: Record<string, unknown>, statusCode: number) {\n    super(String(json.message || json.error || UNKNOWN_ERROR));\n    this.name = 'MapboxError';\n    this.statusCode = statusCode;\n  }\n\n  /**\n   * Modified Error toString() method to include the status code.\n   */\n  toString(): string {\n    return `${this.name} (${this.statusCode}): ${this.message}`;\n  }\n}\n\n/**\n * Utility function to see if the result is \"ok\" (in 200 range).\n *\n * If not, throw a {@link MapboxError} filled out by the\n * [JSON error format](https://docs.mapbox.com/api/search/search/#search-api-errors).\n */\nexport async function handleNonOkRes(res: Response): Promise<void> {\n  if (!res.ok) {\n    const json = await res.json();\n    throw new MapboxError(json, res.status);\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// GLOBALS\nlet _fetchImpl: typeof fetch = globalThis.fetch;\nlet _abortControllerImpl: typeof AbortController = globalThis.AbortController;\n\ninterface FetchImplementation {\n  fetch: typeof fetch;\n  AbortController: typeof AbortController;\n}\n\n/**\n * Polyfills {@link fetch} implementation used in Search JS Core.\n *\n * If a `fetch` implementation is already available, the polyfill will be\n * silently ignored.\n *\n * Search JS Core will automatically use `node-fetch` if running in Node.js,\n * making this function unnecessary for most use cases.\n *\n * @param opts Options for the polyfill.\n * @param {fetch} opts.fetch Required. A custom `fetch` implementation.\n * @param {AbortController} opts.AbortController Required. A custom `AbortController` implementation.\n * @param {boolean} force If `true`, the polyfill will be forced to load. Otherwise, it will only load if `fetch` is not available.\n */\nexport function polyfillFetch(\n  { fetch, AbortController }: FetchImplementation,\n  force = false\n): void {\n  if (!fetch) {\n    throw new Error(\n      'Fetch implementation must include implementations of `fetch`.'\n    );\n  }\n\n  if (_fetchImpl && !force) {\n    return;\n  }\n  _fetchImpl = fetch;\n  _abortControllerImpl = AbortController;\n}\n\n/**\n * Returns the {@link FetchImplementation} used by Search JS Core.\n */\nexport function getFetch(): FetchImplementation {\n  if (!_fetchImpl) {\n    throw new Error(\n      'Fetch implementation not found. Please use `polyfillFetch` from `@mapbox/search-js-core` to fix this issue.'\n    );\n  }\n\n  return {\n    fetch: _fetchImpl,\n    AbortController: _abortControllerImpl\n  };\n}\n\n/**\n * Trick ESBuild here into using Node.js require.\n */\nfunction nodeRequire(fn: typeof require, str: string): any {\n  return fn(str);\n}\n\n/**\n * Check for Node.js environment on launch and import `node-fetch` if necessary.\n * https://github.com/node-fetch/node-fetch#commonjs\n */\nif (!_fetchImpl && typeof 'process' !== 'undefined' && process.versions.node) {\n  // Separate the import statement so bundlers can optimize it out.\n  const { default: fetch } = nodeRequire(require, 'node-fetch');\n  const AbortController = nodeRequire(require, 'abort-controller');\n\n  polyfillFetch({\n    fetch,\n    AbortController\n  });\n}\n", "type Primitive = string | number | boolean | null;\n\n/**\n * tl;dr - [classnames](https://www.npmjs.com/package/classnames) for query parameters.\n *\n * Encodes query parameters into a stringified form, good for use with {@link URL#search}.\n * Objects are key-value pairs, and if a falsy object is passed, it will be omitted.\n *\n * Null and undefined values are ignored.\n * Array values are encoded as comma-separated values.\n *\n * @example\n * ```typescript\n * const limit = 0;\n * const offset = null;\n * const params = queryParams(\n *  {\n *    q: 'pizza',\n *    c: null\n *  },\n *  (limit != null) && { limit },\n *  (offset != null) && { offset }\n * );\n * console.log(params); // = 'q=pizza&limit=0'\n * ```\n */\nexport function queryParams<T extends Record<string, Primitive>>(\n  ...objects: (T | false)[]\n): string {\n  const params = [];\n  for (const obj of objects) {\n    if (!obj) continue;\n\n    const entries = Object.entries(obj);\n    for (const [key, value] of entries) {\n      if (value == null) continue;\n      params.push(`${key}=${encodeURIComponent(String(value))}`);\n    }\n  }\n\n  return params.join('&');\n}\n", "import {\n  ENDPOINT_RETRIEVE,\n  ENDPOINT_SUGGEST,\n  FORWARD_URL,\n  PERMANENT_FORWARD_URL,\n  PERMANENT_REVERSE_URL,\n  RETRIEVE_URL,\n  REVERSE_URL,\n  SUGGEST_URL\n} from './constants';\nimport {\n  AdministrativeUnitTypes,\n  Suggestion,\n  FeatureSuggestion\n} from './types';\n\nimport { LngLat, LngLatLike } from '../LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from '../LngLatBounds';\nimport { SessionToken, SessionTokenLike } from '../SessionToken';\n\nimport { handleNonOkRes } from '../MapboxError';\nimport { getFetch } from '../fetch';\nimport { queryParams } from '../utils/queryParams';\n\ninterface AccessTokenOptions {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n}\n\ninterface FetchOptions {\n  /**\n   * If specified, the connected {@link AbortController} can be used to\n   * abort the current network request(s).\n   *\n   * This mechanism works in the same way as the [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#aborting_a_fetch).\n   *\n   * Reference:\n   * https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal#examples\n   */\n  signal?: AbortSignal;\n}\n\ninterface SessionTokenOptions {\n  /**\n   * A customer-provided session token value, which groups a series of requests\n   * together for [billing purposes](https://docs.mapbox.com/api/search/search/#search-api-pricing).\n   *\n   * Reference:\n   * https://docs.mapbox.com/api/search/search/#session-based-pricing\n   */\n  sessionToken: SessionTokenLike;\n}\n\n/**\n * @typedef Options\n */\nexport interface Options {\n  /**\n   * The [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) to be returned.\n   *\n   * If not specified, `en` will be used.\n   */\n  language: string;\n  /**\n   * An [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to be returned.\n   *\n   * If not specified, results will not be filtered by country.\n   */\n  country: string;\n\n  /**\n   * Limit results to only those contained within the supplied bounding box.\n   */\n  bbox: string | LngLatBoundsLike;\n  /**\n   * The number of results to return, up to `10`.\n   */\n  limit: string | number;\n  /**\n   * The navigation routing profile to use for distance/eta calculations.\n   *\n   * For distance calculations, both {@link Options#navigation_profile} and\n   * {@link Options#origin} must be specified.\n   *\n   * For ETA calculations: {@link Options#navigation_profile},\n   * {@link Options#origin}, and {@link Options#eta_type} must be specified.\n   */\n  navigation_profile?: 'driving' | 'walking' | 'cycling';\n  /**\n   * The location from which to calculate distance. **This parameter may incur additional latency.**\n   *\n   * When both {@link Options#proximity} and {@link Options#origin} are specified, `origin` is interpreted as the\n   * target of a route, while `proximity` indicates the current user location.\n   *\n   * For distance calculations, both {@link Options#navigation_profile} and\n   * {@link Options#origin} must be specified.\n   *\n   * For ETA calculations: {@link Options#navigation_profile},\n   * {@link Options#origin}, and {@link Options#eta_type} must be specified.\n   */\n  origin: string | LngLatLike;\n  /**\n   * Bias the response to favor results that are closer to this location.\n   *\n   * When both {@link Options#proximity} and {@link Options#origin} are specified, `origin` is interpreted as the\n   * target of a route, while `proximity` indicates the current user location.\n   */\n  proximity: string | LngLatLike;\n  /**\n   * Used to estimate the time of arrival from {@link Options#origin}. **This parameter may incur additional latency.**\n   *\n   * For ETA calculations: {@link Options#navigation_profile},\n   * {@link Options#origin}, and {@link Options#eta_type} must be specified.\n   */\n  eta_type?: 'navigation';\n  /**\n   * Limit results to one or more types of features. If no types are specified, all possible types may be returned.\n   *\n   * Reference:\n   * https://docs.mapbox.com/api/search/search/#administrative-unit-types\n   */\n  types?: string | Set<AdministrativeUnitTypes>;\n}\n\ninterface PermanentOptions {\n  /**\n   * The permanent endpoints are used for use cases that require storing\n   * position data. If 'true', the permanent endpoints will be used, which are\n   * billed separately.\n   *\n   * If you're interested in using {@link PermanentOptions#permanent}, contact\n   * [Mapbox sales](https://www.mapbox.com/contact/sales/).\n   *\n   * It's important to speak with an Account Manager on the Sales team prior to making requests\n   * with {@link PermanentOptions#permanent} set to `true`, as unsuccessful requests\n   * made by an account that does not have access to the endpoint may be billable.\n   */\n  permanent: boolean;\n}\n\n/**\n * @typedef SuggestionResponse\n */\nexport interface SuggestionResponse {\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned suggestion objects.\n   *\n   * @see {@link Suggestion}\n   */\n  suggestions: Suggestion[];\n}\n\n/**\n * @typedef RetrieveResponse\n */\nexport interface RetrieveResponse {\n  type: 'FeatureCollection';\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link FeatureSuggestion}\n   */\n  features: FeatureSuggestion[];\n}\n\n/**\n * A `MapboxSearch` object is an application's main entrypoint to the [Mapbox Search API](https://docs.mapbox.com/api/search/search/).\n *\n * `MapboxSearch` is focused on the two-step, interactive search experience. These steps are:\n *   1. {@link MapboxSearch#suggest}: The user enters a search term, and a list of suggested results is returned with\n *      optional data such as: eta, distance calculations, etc.\n *   2. {@link MapboxSearch#retrieve}: The user selects a result from the list of suggested results, and the\n *     corresponding geographic coordinates are returned for displaying on a map or otherwise manipulating.\n *\n * A [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) is required to use `MapboxSearch`, and\n * other options may be specified either in the constructor or in the {@link MapboxSearch#suggest} call.\n *\n * @class MapboxSearch\n * @param {Options} [options]\n * @param {string} [options.accessToken]\n *\n * @example\n * ```typescript\n * const search = new MapboxSearch({ accessToken: 'pk.my-mapbox-access-token' });\n *\n * const sessionToken = new SessionToken();\n * const result = await search.suggest('Washington D.C.', { sessionToken });\n * if (result.suggestions.length === 0) return;\n *\n * const suggestion = result.suggestions[0];\n * if (search.canRetrieve(suggestion)) {\n *  const { features } = await search.retrieve(suggestion, { sessionToken });\n *  doSomethingWithCoordinates(features);\n * } else if (search.canSuggest(suggestion)) {\n *   // .. go through suggest flow again ..\n * }\n * ```\n */\nexport class MapboxSearch {\n  static defaults: Partial<Options> = {\n    language: 'en'\n  };\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n\n  /**\n   * Any default options ({@link Options}) to be merged into options in the following methods:\n   * - {@link MapboxSearch#suggest}\n   * - {@link MapboxSearch#forward}\n   * - {@link MapboxSearch#reverse}\n   */\n  defaults: Partial<Options>;\n\n  constructor(options: Partial<AccessTokenOptions & Options> = {}) {\n    const { accessToken, ...defaults } = options;\n\n    this.accessToken = accessToken;\n\n    // Assign defaults to this.defaults.\n    this.defaults = {\n      ...MapboxSearch.defaults,\n      ...defaults\n    };\n  }\n\n  /** @section {Interactive search} */\n\n  /**\n   * {@link MapboxSearch#suggest} is \"part one\" of the two-step interactive search experience, and includes\n   * useful information such as: {@link Suggestion#feature_name}, {@link Suggestion#description}, and {@link Suggestion#maki}.\n   *\n   * Suggestion objects **do not include geographic coordinates**. To get the coordinates of the result, use {@link MapboxSearch#retrieve}.\n   *\n   * It may be useful to call {@link MapboxSearch#canRetrieve} before calling this method, as the suggestion may be a reference to\n   * another suggest query. This can also be tested with {@link MapboxSearch#canSuggest}, and further calls to {@link MapboxSearch#suggest}.\n   *\n   * For tracking purposes, it is useful for any follow-up requests based on this suggestion to include same\n   * {@link Suggestion#sessionToken} as the original request.\n   *\n   * If you'd like session tokens to be handled automatically, see {@link SearchSession}.\n   *\n   * @param {string} searchText\n   * @param {Options} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async suggest(\n    searchText: string,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions & Options>\n  ): Promise<SuggestionResponse> {\n    if (!searchText) {\n      throw new Error('searchText is required');\n    }\n    if (!this.accessToken) {\n      throw new Error('accessToken is required');\n    }\n    if (!optionsArg || !optionsArg.sessionToken) {\n      throw new Error('sessionToken is required');\n    }\n\n    const { sessionToken, signal } = optionsArg;\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg,\n      sessionToken\n    };\n\n    if (options.eta_type && (!options.origin || !options.navigation_profile)) {\n      throw new Error(\n        'to provide eta estimate: eta, navigation_profile, and origin are required'\n      );\n    }\n    if (options.origin && !options.navigation_profile) {\n      throw new Error(\n        'to provide distance estimate: both navigation_profile and origin are required'\n      );\n    }\n\n    const url = new URL(`${SUGGEST_URL}/${encodeURIComponent(searchText)}`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as SuggestionResponse;\n    return json;\n  }\n\n  /**\n   * {@link MapboxSearch#retrieve} is \"part two\" of the two-step interactive search experience and includes\n   * geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * {@link suggestion} is usually a {@link Suggestion} returned from \"part one,\" {@link MapboxSearch#suggest}.\n   *\n   * Multiple feature suggestions may be returned from a single search query, for example in an airport with\n   * multiple terminals.\n   *\n   * **Legal terms:**\n   *\n   * Due to legal terms from our data sources, if the results are to be cached/stored in a customer database,\n   * feature suggestions should come from the {@link MapboxSearch#forward} method\n   * with {@link PermanentOptions#permanent} enabled.\n   *\n   * Otherwise, results should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {any} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async retrieve(\n    suggestion: Suggestion,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions>\n  ): Promise<RetrieveResponse> {\n    if (!suggestion) {\n      throw new Error('suggestion is required');\n    }\n    if (!this.accessToken) {\n      throw new Error('accessToken is required');\n    }\n    if (!this.canRetrieve(suggestion)) {\n      throw new Error('suggestion cannot be retrieved');\n    }\n    if (!optionsArg || !optionsArg.sessionToken) {\n      throw new Error('sessionToken is required');\n    }\n\n    const { sessionToken: sessionTokenLike, signal } = optionsArg;\n\n    const sessionToken = SessionToken.convert(sessionTokenLike);\n\n    const url = new URL(RETRIEVE_URL);\n    url.search = queryParams({\n      access_token: this.accessToken,\n      session_token: sessionToken.id\n    });\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      ...this.#getFetchInfo(suggestion),\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as RetrieveResponse;\n    return json;\n  }\n\n  /**\n   * Returns true if {@link MapboxSearch#retrieve} can be called on this suggestion,\n   * false otherwise.\n   *\n   * This indicates the [Mapbox Search API](https://docs.mapbox.com/api/search/search/) has geographic coordinates\n   * for this suggestion.\n   *\n   * This method is mutually exclusive with {@link MapboxSearch#canSuggest}.\n   */\n  canRetrieve(suggestion: Suggestion): boolean {\n    const action = suggestion.action;\n    if (!action) {\n      return false;\n    }\n\n    return action.method === 'POST' && action.endpoint === ENDPOINT_RETRIEVE;\n  }\n\n  /**\n   * Returns true if {@link MapboxSearch#suggest} can be called on this suggestion,\n   * false otherwise.\n   *\n   * This indicates the [Mapbox Search API](https://docs.mapbox.com/api/search/search/) wants to do another\n   * suggestion search on this result, and does not have geographic coordinates.\n   *\n   * This method is mutually exclusive with {@link MapboxSearch#canRetrieve}.\n   */\n  canSuggest(suggestion: Suggestion): boolean {\n    const action = suggestion.action;\n    if (!action) {\n      return false;\n    }\n\n    return action.method === 'POST' && action.endpoint === ENDPOINT_SUGGEST;\n  }\n\n  /** @section {Programmatic search} */\n\n  /**\n   * {@link MapboxSearch#forward} is our programmatic one-step search experience and includes\n   * geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * Multiple feature suggestions may be returned from a single search query, for example in an airport with\n   * multiple terminals.\n   *\n   * **Legal terms:**\n   *\n   * Due to legal terms from our data sources, if the results are to be cached/stored in a customer database,\n   * {@link PermanentOptions#permanent} should be enabled. This requires contacting Mapbox support.\n   *\n   * Otherwise, results should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {Options} optionsArg\n   * @param {AbortSignal} [optionsArg.signal]\n   * @param {boolean} [optionsArg.permanent]\n   */\n  async forward(\n    searchText: string,\n    optionsArg: Partial<FetchOptions & Options & PermanentOptions> = {}\n  ): Promise<RetrieveResponse> {\n    if (!searchText) {\n      throw new Error('searchText is required');\n    }\n    if (!this.accessToken) {\n      throw new Error('accessToken is required');\n    }\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg\n    };\n\n    const baseUrl = options.permanent ? PERMANENT_FORWARD_URL : FORWARD_URL;\n    const url = new URL(`${baseUrl}/${encodeURIComponent(searchText)}`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal: options.signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as RetrieveResponse;\n    return json;\n  }\n\n  /**\n   * {@link MapboxSearch#reverse} allows you to look up a geographic coordinate pair\n   * and returns the feature(s) in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * Multiple feature suggestions may be returned from a single search query, for example in an airport with\n   * multiple terminals.\n   *\n   * **Legal terms:**\n   *\n   * Due to legal terms from our data sources, if the results are to be cached/stored in a customer database,\n   * {@link PermanentOptions#permanent} should be enabled. This requires contacting Mapbox support.\n   *\n   * Otherwise, results should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param lngLat - Either a {@link LngLatLike} object or string in 'lng,lat' comma-separated format.\n   * @param {Options} optionsArg\n   * @param {AbortSignal} [optionsArg.signal]\n   * @param {boolean} [optionsArg.permanent]\n   */\n  async reverse(\n    lngLat: string | LngLatLike,\n    optionsArg: Partial<FetchOptions & Options & PermanentOptions> = {}\n  ): Promise<RetrieveResponse> {\n    if (!lngLat) {\n      throw new Error('lngLat is required');\n    }\n    if (!this.accessToken) {\n      throw new Error('accessToken is required');\n    }\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg\n    };\n\n    const searchText =\n      typeof lngLat === 'string'\n        ? lngLat\n        : LngLat.convert(lngLat).toArray().join(',');\n\n    const baseUrl = options.permanent ? PERMANENT_REVERSE_URL : REVERSE_URL;\n    const url = new URL(`${baseUrl}/${encodeURIComponent(searchText)}`);\n    url.search = queryParams(\n      {\n        access_token: this.accessToken,\n        language: options.language,\n        limit: options.limit\n      },\n      options.types && {\n        types:\n          typeof options.types === 'string'\n            ? options.types\n            : [...options.types].join(',')\n      }\n    );\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal: options.signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as RetrieveResponse;\n    return json;\n  }\n\n  /**\n   * Returns the query parameters used by {@link MapboxSearch#suggest} and\n   * {@link MapboxSearch#forward}.\n   */\n  #getQueryParams(options: Partial<Options & SessionTokenOptions>): string {\n    return queryParams(\n      {\n        access_token: this.accessToken,\n        language: options.language,\n        country: options.country,\n        limit: options.limit,\n        navigation_profile: options.navigation_profile,\n        eta_type: options.eta_type\n      },\n      options.sessionToken && {\n        session_token: SessionToken.convert(options.sessionToken).id\n      },\n      options.origin && {\n        origin:\n          typeof options.origin === 'string'\n            ? options.origin\n            : LngLat.convert(options.origin).toArray().join(',')\n      },\n      options.proximity && {\n        proximity:\n          typeof options.proximity === 'string'\n            ? options.proximity\n            : LngLat.convert(options.proximity).toArray().join(',')\n      },\n      options.bbox && {\n        bbox:\n          typeof options.bbox === 'string'\n            ? options.bbox\n            : LngLatBounds.convert(options.bbox).toFlatArray().join(',')\n      },\n      options.types && {\n        types:\n          typeof options.types === 'string'\n            ? options.types\n            : [...options.types].join(',')\n      }\n    );\n  }\n\n  /**\n   * Gets a partial fetch request from this suggestion's action.\n   */\n  #getFetchInfo(suggestion: Suggestion): Partial<RequestInit> {\n    if (!this.canRetrieve(suggestion) && !this.canSuggest(suggestion)) {\n      throw new Error('Suggestion cannot be retrieved or suggested');\n    }\n\n    const action = suggestion.action;\n    const body = JSON.stringify(action.body);\n\n    return {\n      method: action.method,\n      body,\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': body.length.toString()\n      }\n    };\n  }\n}\n", "export const SEARCH_URL = `https://api.mapbox.com/autofill/v1`;\n\nexport const ENDPOINT_SUGGEST = 'suggest';\nexport const ENDPOINT_RETRIEVE = 'retrieve';\n\nexport const SUGGEST_URL = `${SEARCH_URL}/${ENDPOINT_SUGGEST}`;\nexport const RETRIEVE_URL = `${SEARCH_URL}/${ENDPOINT_RETRIEVE}`;\n", "import { RETRIEVE_URL, SUGGEST_URL } from './constants';\nimport { AutofillSuggestion, AutofillFeatureSuggestion } from './types';\n\nimport { LngLat, LngLatLike } from '../LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from '../LngLatBounds';\nimport { SessionToken, SessionTokenLike } from '../SessionToken';\n\nimport { handleNonOkRes } from '../MapboxError';\nimport { getFetch } from '../fetch';\nimport { queryParams } from '../utils/queryParams';\n\ninterface AccessTokenOptions {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n}\n\ninterface FetchOptions {\n  /**\n   * If specified, the connected {@link AbortController} can be used to\n   * abort the current network request(s).\n   *\n   * This mechanism intentionally works in the same way as the\n   * [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#aborting_a_fetch).\n   *\n   * Reference:\n   * https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal#examples\n   */\n  signal?: AbortSignal;\n}\n\ninterface SessionTokenOptions {\n  /**\n   * A customer-provided session token value, which groups a series of requests together for [billing purposes](https://docs.mapbox.com/api/search/search/#search-api-pricing).\n   *\n   * Reference:\n   * https://docs.mapbox.com/api/search/search/#session-based-pricing\n   */\n  sessionToken: SessionTokenLike;\n}\n\n/**\n * @typedef AutofillOptions\n */\nexport interface AutofillOptions {\n  /**\n   * The [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) to be returned.\n   *\n   * If not specified, `en` will be used.\n   */\n  language: string;\n  /**\n   * An [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to be returned.\n   *\n   * If not specified, results will not be filtered by country.\n   */\n  country: string;\n  /**\n   * Limit results to only those contained within the supplied bounding box.\n   */\n  bbox: string | LngLatBoundsLike;\n  /**\n   * The number of results to return, up to `10`.\n   */\n  limit: string | number;\n  /**\n   * Bias the response to favor results that are closer to this location.\n   *\n   * When both {@link AutofillOptions#proximity} and {@link AutofillOptions#origin} are specified, `origin` is interpreted as the\n   * target of a route, while `proximity` indicates the current user location.\n   */\n  proximity: string | LngLatLike;\n}\n\n/**\n * @typedef AutofillSuggestionResponse\n */\nexport interface AutofillSuggestionResponse {\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned suggestion objects.\n   *\n   * @see {@link Suggestion}\n   */\n  suggestions: AutofillSuggestion[];\n}\n\n/**\n * @typedef AutofillRetrieveResponse\n */\nexport interface AutofillRetrieveResponse {\n  type: 'FeatureCollection';\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link FeatureSuggestion}\n   */\n  features: AutofillFeatureSuggestion[];\n}\n\n/**\n * A `MapboxAutofill` object is an application's main entrypoint to the\n * Mapbox Autofill API. The Mapbox Autofill API is an API similar to {@link MapboxSearch},\n * but targeted towards **address** autocomplete.\n *\n * Only address types are returned by the API.\n *\n * `MapboxAutofill` is focused on the two-step, interactive search experience. These steps are:\n *   1. {@link MapboxAutofill#suggest}: The user enters a search term, and a list of suggested results is returned with\n *     address data.\n *   2. {@link MapboxAutofill#retrieve}: The user selects a result from the list of suggested results, and the\n *     corresponding geographic coordinates are returned.\n *\n * A [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) is required to use `MapboxAutofill`, and\n * other options may be specified either in the constructor or in the {@link MapboxAutofill#suggest} call.\n *\n * @class MapboxAutofill\n * @param {AutofillOptions} [options]\n * @param {string} [options.accessToken]\n */\nexport class MapboxAutofill {\n  static defaults: Partial<AutofillOptions> = {\n    language: 'en',\n    proximity: 'ip'\n  };\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n\n  /**\n   * Any default options ({@link AutofillOptions}) to be merged into options in the following methods:\n   * - {@link MapboxAutofill#suggest}\n   *\n   * @type {AutofillOptions}\n   */\n  defaults: Partial<AutofillOptions>;\n\n  constructor(options: Partial<AccessTokenOptions & AutofillOptions> = {}) {\n    const { accessToken, ...defaults } = options;\n\n    this.accessToken = accessToken;\n\n    // Assign defaults to this.defaults.\n    this.defaults = {\n      ...MapboxAutofill.defaults,\n      ...defaults\n    };\n  }\n\n  /** @section {Methods} */\n\n  /**\n   * {@link MapboxAutofill#suggest} is \"part one\" of the two-step autofill experience, and includes\n   * autofill information.\n   *\n   * Suggestion objects **do not include geographic coordinates**. To get the coordinates of the result, use {@link MapboxSearch#retrieve}.\n   *\n   * For tracking purposes, it is useful for any follow-up requests based on this suggestion to include same\n   * {@link Suggestion#sessionToken} as the original request.\n   *\n   * If you'd like session tokens to be handled automatically, see {@link SearchSession}.\n   *\n   * @param {AutofillOptions} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async suggest(\n    searchText: string,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions & AutofillOptions>\n  ): Promise<AutofillSuggestionResponse> {\n    if (!searchText) {\n      throw new Error('searchText is required');\n    }\n    if (!this.accessToken) {\n      throw new Error('accessToken is required');\n    }\n    if (!optionsArg || !optionsArg.sessionToken) {\n      throw new Error('sessionToken is required');\n    }\n\n    const { sessionToken, signal } = optionsArg;\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg,\n      sessionToken\n    };\n\n    const url = new URL(`${SUGGEST_URL}/${encodeURIComponent(searchText)}`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as AutofillSuggestionResponse;\n\n    // Add 'original_search_text' so we can retrieve.\n    return {\n      ...json,\n      suggestions: json.suggestions.map((suggestion) => {\n        return {\n          ...suggestion,\n          original_search_text: searchText\n        };\n      })\n    };\n  }\n\n  /**\n   * {@link MapboxAutofill#retrieve} is \"part two\" of the two-step autofill experience and includes\n   * geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * {@link suggestion} is usually a {@link AutofillSuggestion} returned from \"part one,\"\n   * {@link MapboxAutofill#suggest}.\n   *\n   * Multiple feature suggestions may be returned from a single address,\n   * for example an address with multiple buildings.\n   *\n   * **Legal terms:**\n   *\n   * Geographic coordinates should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {AutofillOptions} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async retrieve(\n    suggestion: string | AutofillSuggestion,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions & AutofillOptions>\n  ): Promise<AutofillRetrieveResponse> {\n    if (!suggestion) {\n      throw new Error('suggestion is required');\n    }\n    if (!this.accessToken) {\n      throw new Error('accessToken is required');\n    }\n    if (!optionsArg || !optionsArg.sessionToken) {\n      throw new Error('sessionToken is required');\n    }\n\n    const { sessionToken, signal } = optionsArg;\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg,\n      sessionToken\n    };\n\n    const isRichSuggestion = typeof suggestion !== 'string';\n\n    const searchText = isRichSuggestion\n      ? suggestion.original_search_text\n      : suggestion;\n    const url = new URL(`${RETRIEVE_URL}/${encodeURIComponent(searchText)}`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as AutofillRetrieveResponse;\n    if (!isRichSuggestion) {\n      return json;\n    }\n\n    return {\n      ...json,\n      features: json.features.filter((feature) => {\n        return feature.properties.full_address === suggestion.full_address;\n      })\n    };\n  }\n\n  /**\n   * Returns the query parameters used by {@link MapboxSearch#suggest} and\n   * {@link MapboxSearch#forward}.\n   */\n  #getQueryParams(\n    options: Partial<AutofillOptions & SessionTokenOptions>\n  ): string {\n    return queryParams(\n      {\n        access_token: this.accessToken,\n        language: options.language,\n        country: options.country,\n        limit: options.limit\n      },\n      options.sessionToken && {\n        session_token: SessionToken.convert(options.sessionToken).id\n      },\n      options.proximity && {\n        proximity:\n          typeof options.proximity === 'string'\n            ? options.proximity\n            : LngLat.convert(options.proximity).toArray().join(',')\n      },\n      options.bbox && {\n        bbox:\n          typeof options.bbox === 'string'\n            ? options.bbox\n            : LngLatBounds.convert(options.bbox).toFlatArray().join(',')\n      }\n    );\n  }\n}\n", "// Type definitions for /suggest endpoint suggestions.\n\nimport { LngLatBoundsLike } from '../LngLatBounds';\n\n/**\n * @typedef AutofillMatchCodeConfidence\n */\nexport enum AutofillMatchCodeConfidence {\n  /**\n   * An exact match.\n   */\n  exact = 'exact',\n  /**\n   * High confidence of a match.\n   */\n  high = 'high',\n  /**\n   * Medium confidence of a match.\n   */\n  medium = 'medium',\n  /**\n   * Low confidence of a match.\n   */\n  low = 'low'\n}\n\n/**\n * An object describing the level of confidence that the given response feature matches the address intended by the request query.\n * Includes boolean flags denoting matches for each address sub-component.\n *\n * @typedef AutofillMatchCode\n */\nexport interface AutofillMatchCode {\n  /**\n   * A measure of confidence that the returned feature suggestion matches the intended address, based on the search text provided.\n   */\n  confidence: AutofillMatchCodeConfidence;\n  /**\n   * True if the confidence value is \"exact\".\n   */\n  exact_match: boolean;\n  /**\n   * True if the house number component was matched.\n   */\n  house_number: boolean;\n  /**\n   * True if the street component was matched.\n   */\n  street: boolean;\n  /**\n   * True if the postcode was matched.\n   */\n  postcode: boolean;\n  /**\n   * True if the place component was matched.\n   */\n  place: boolean;\n  /**\n   * True if the region component was matched.\n   */\n  region?: boolean;\n  /**\n   * True if the locality component was matched.\n   */\n  locality?: boolean;\n}\n\n/**\n * An `AutofillSuggestion` object represents a suggestion\n * result from the Mapbox Autofill API.\n *\n * Suggestion objects are \"part one\" of the two-step interactive autofill experience.\n * Suggestion objects do not include geographic coordinates.\n *\n * To get the coordinates of the result, use {@link MapboxAutofill#retrieve}.\n *\n * For tracking purposes, it is useful for any follow-up requests based on this suggestion to include same\n * {@link SessionToken} as the original request.\n *\n * @typedef AutofillSuggestion\n * @example\n * ```typescript\n * const autofill = new MapboxAutofill({ accessToken: 'pk.my-mapbox-access-token' });\n *\n * const sessionToken = new SessionToken();\n * const result = await search.autofill('Washington D.C.', { sessionToken });\n * if (result.suggestions.length === 0) return;\n *\n * const suggestion = result.suggestions[0];\n * const { features } = await autofill.retrieve(suggestion, { sessionToken });\n * doSomethingWithCoordinates(features);\n * ```\n */\nexport interface AutofillSuggestion {\n  /**\n   * This is added by {@link MapboxAutofill} and is **not** part of the\n   * Autofill API.\n   *\n   * @ignore\n   */\n  original_search_text: string;\n\n  /**\n   * The name of the feature.\n   */\n  feature_name: string;\n  /**\n   * The feature name, as matched by the search algorithm.\n   */\n  matching_name: string;\n  /**\n   * Additional details, such as city and state for addresses.\n   */\n  description: string;\n  /**\n   * The name of the [Maki](https://labs.mapbox.com/maki-icons/) icon associated with the feature.\n   */\n  maki?: string;\n  /**\n   * The [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the feature.\n   */\n  language: string;\n\n  address?: string;\n  /**\n   * The full address of the suggestion.\n   */\n  full_address?: string;\n\n  /**\n   * Address line 1 from the [WHATWG Autocomplete Specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)\n   */\n  address_line1?: string;\n  /**\n   * Address line 2 from the [WHATWG Autocomplete Specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)\n   */\n  address_line2?: string;\n  /**\n   * Address line 3 from the [WHATWG Autocomplete Specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)\n   */\n  address_line3?: string;\n\n  /**\n   * Address level 1 from the [WHATWG Autocomplete Specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)\n   */\n  address_level1?: string;\n  /**\n   * Address level 2 from the [WHATWG Autocomplete Specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)\n   */\n  address_level2?: string;\n  /**\n   * Address level 3 from the [WHATWG Autocomplete Specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)\n   */\n  address_level3?: string;\n\n  /**\n   * Long form country name, for example: \"United States\"\n   */\n  country?: string;\n  /**\n   * Postal code.\n   */\n  postcode?: string;\n\n  /**\n   * Address metadata fields of the feature.\n   *\n   * Includes the short form country name, for example: \"us\". This follows the\n   * [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) specification.\n   */\n  metadata: {\n    iso_3166_1: string;\n  };\n\n  /**\n   * A string representing the feature in the requested language, if specified, and its full result hierarchy.\n   */\n  place_name?: string;\n\n  /**\n   * An object describing the level of confidence that the given response feature matches the address intended by the request query.\n   * Includes boolean flags denoting matches for each address sub-component.\n   */\n  match_code: AutofillMatchCode;\n}\n\n/**\n * An `AutofillFeatureSuggestion` object represents [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/)\n * suggestion results from the Mapbox Autofill API.\n *\n * As per the Mapbox Autofill API, this will always be [Point](https://geojson.org/geojson-spec.html#point).\n *\n * @typedef AutofillFeatureSuggestion\n * @example\n * ```typescript\n * const featureSuggestion = {\n *   type: 'Feature',\n *   geometry: {\n *     type: 'Point',\n *     coordinates: [0,0]\n *   },\n *   properties: {\n *     feature_name: 'Washington D.C.',\n *   }\n * };\n * ```\n */\nexport type AutofillFeatureSuggestion = GeoJSON.Feature<\n  GeoJSON.Point,\n  AutofillSuggestion\n> & {\n  /**\n   * A bounding box for the feature. This may be significantly\n   * larger than the geometry.\n   */\n  bbox?: LngLatBoundsLike;\n};\n", "/**\n * `Evented` mixes methods into other classes for event capabilities.\n *\n * If you are an end-user, you will most likely use these methods through\n * classes like {@link SearchSession}.\n *\n * For lists of events you can listen for, see API documentation for\n * specific classes.\n *\n * @class Evented\n */\nexport class Evented<T> {\n  #listeners: Partial<{\n    [key in keyof T]: ((arg0: T[key]) => void)[];\n  }> = {};\n\n  /**\n   * Adds a listener to a specified event type.\n   *\n   * @param type - The event type to add a listen for.\n   * @param listener - The function to be called when the event is fired.\n   */\n  addEventListener<K extends keyof T>(\n    type: K,\n    listener: (arg0: T[K]) => void\n  ): void {\n    const listenersArr = this.#listeners;\n\n    // Create listener if doesn't already exist.\n    if (!listenersArr[type]) {\n      listenersArr[type] = [];\n    }\n\n    listenersArr[type].push(listener);\n  }\n\n  /**\n   * Removes a previously registered event listener.\n   *\n   * @param type - The event type to remove listeners for.\n   * @param listener - The listener function to remove.\n   */\n  removeEventListener<K extends keyof T>(\n    type: K,\n    listener: (arg0: T[K]) => void\n  ): void {\n    const listenersArr = this.#listeners;\n\n    // If a type doesn't exist, return early.\n    if (!listenersArr[type]) {\n      return;\n    }\n\n    const listeners = listenersArr[type];\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  fire<K extends keyof T>(type: K, arg0: T[K]): void {\n    const listenersArr = this.#listeners;\n\n    // If a type doesn't exist, return early.\n    if (!listenersArr[type]) {\n      return;\n    }\n\n    const listeners = listenersArr[type];\n    for (const listener of listeners) {\n      listener(arg0);\n    }\n  }\n}\n", "/**\n * Version of the classic `debounce` function that accepts a `signalFn`\n * argument, which can return an {@link AbortSignal}.\n */\nexport function debounce<F extends (...args: unknown[]) => unknown>(\n  func: F,\n  wait: number,\n  signalFn?: () => AbortSignal\n): F {\n  let timeout = null;\n\n  return ((...args: Parameters<F>) => {\n    if (timeout !== null) {\n      clearTimeout(timeout);\n    }\n\n    const signal = signalFn && signalFn();\n    timeout = setTimeout(() => {\n      timeout = null;\n      if (signal?.aborted) {\n        return;\n      }\n      func(...args);\n    }, wait);\n  }) as F;\n}\n", "/* eslint-disable prefer-const */\nimport { SessionToken, SessionTokenLike } from './SessionToken';\n\nimport { getFetch } from './fetch';\n\nimport { Evented } from './utils/Evented';\nimport { debounce } from './utils/debounce';\n\nconst SESSION_TOKEN_NUM = 50;\n\n/**\n * Shortcut function to create a new AbortController from the polyfill.\n */\nfunction createAbortController(): AbortController {\n  const { AbortController } = getFetch();\n  return new AbortController();\n}\n\ninterface EventTypes<SuggestionResponse, RetrieveResponse> {\n  suggest: SuggestionResponse;\n  suggesterror: Error;\n  retrieve: RetrieveResponse;\n}\n\n/**\n * TypeScript magic section: what is this?\n *\n * Despite the name {@link SearchSession}, in Search JS Web we use it to control\n * both {@link MapboxSearch} **and** {@link MapboxAutofill} instances. Both\n * of these have similar workflows, but are separate APIs with different options\n * and responses.\n *\n * In order to make TypeScript happy, this type is an \"approximation\" of what\n * {@link SearchSession} uses. When you construct a new {@link SearchSession},\n * because of this type [Options, Suggestion, SuggestionResponse, RetrieveResponse]\n * are automatically inferred.\n *\n * @internal\n * @example\n * ```typescript\n * const autofill = new MapboxAutofill({\n *  accessToken: 'pk.my-fancy-token',\n * });\n *\n * const session = new SearchSession(autofill);\n *\n * `session` has inferred type = SearchSession<\n *   AutofillOptions,\n *   AutofillSuggestion,\n *   AutofillSuggestionResponse,\n *   AutofillRetrieveResponse\n * >\n * ```\n */\ntype SuggestSearch<Options, Suggestion, SuggestionResponse, RetrieveResponse> =\n  {\n    suggest: (\n      text: string,\n      options: Partial<Options> & {\n        sessionToken: SessionTokenLike;\n        signal: AbortSignal;\n      }\n    ) => Promise<SuggestionResponse>;\n    retrieve: (\n      suggestion: Suggestion,\n      options: Partial<Options> & {\n        sessionToken: SessionTokenLike;\n      }\n    ) => Promise<RetrieveResponse>;\n    canRetrieve?: (suggestion: Suggestion) => boolean;\n    canSuggest?: (suggestion: Suggestion) => boolean;\n  };\n\n/**\n * A `SearchSession` object is a managed entrypoint to the [Mapbox Search API](https://docs.mapbox.com/api/search/search/)\n * or Mapbox Autocomplete API.\n *\n * `SearchSession` abstracts the suggest/retrieve flow of the two-step interactive search experience.\n *\n * Compared to using these APIs directly, you can use a `SearchSession` to:\n * 1. Automatically manage the session token lifecycle.\n * 2. Debounce calls to {@link SearchSession#suggest}.\n * 2. Abort in-flight requests with an imperative API.\n *\n * @class SearchSession\n * @example\n * ```typescript\n * const search = new MapboxSearch({ accessToken: 'pk.my-mapbox-access-token' });\n * const session = new SearchSession(search);\n *\n * session.addEventListener('suggest', (res) => {\n *   presentResultsToUser(res.suggestions);\n * });\n *\n * session.addEventListener('retrieve', (res) => {\n *   doSomethingWithFeatureCollection(res);\n * });\n *\n * document.querySelector('button').addEventListener('click', (event) => {\n *   const suggestions = session.suggestions?.suggestions;\n *   if (!suggestions || !suggestions.length) {\n *     return;\n *   }\n *\n *   const suggestion = suggestions[0];\n *   if (session.canRetrieve(suggestion)) {\n *     session.retrieve(suggestion);\n *   } else if (session.canSuggest(suggestion)) {\n *     // .. go through suggest flow again ..\n *     session.suggest(suggestion.text);\n *   }\n * });\n *\n * session.suggest('Washington D.C.');\n * ```\n * @param {MapboxSearch | MapboxAutofill} search - The search interface to wrap.\n * @param {number} wait - The time in milliseconds to wait before sending a new request to the {@link SearchSession#suggest} call.\n */\nexport class SearchSession<\n  Options,\n  Suggestion,\n  SuggestionResponse,\n  RetrieveResponse\n> extends Evented<EventTypes<SuggestionResponse, RetrieveResponse>> {\n  readonly search: SuggestSearch<\n    Options,\n    Suggestion,\n    SuggestionResponse,\n    RetrieveResponse\n  >;\n\n  /**\n   * The time in milliseconds to wait before sending a new request to the\n   * {@link SearchSession#suggest} call.\n   */\n  readonly debounce: number;\n\n  /**\n   * If true, the existing session token will continue to be used regardless\n   * of is expiration state or the number of suggest calls made with it.\n   *\n   * This is used among Autofill components to ensure that a session endures\n   * across the lifecycle of an Autofill checkout process.\n   */\n  #persistSessionToken = false;\n\n  /**\n   * The session token is an SKU (billing token) used to identify the current\n   * search session and provide analytics to the customer.\n   *\n   * As per {@link SessionToken}, this is a UUIDv4 value.\n   *\n   * In the following instances, a new session token is generated:\n   * - On a successful {@link SearchSession#retrieve} call.\n   * - After a certain time (60 min).\n   * - After 50 suggests.\n   */\n  #sessionToken = new SessionToken();\n\n  /**\n   * The {@link SessionToken} used within the current session.\n   *\n   * By default, this value is managed internally and automatically regenerated\n   * according to its lifecycle criteria, i.e. time, number of calls to suggest,\n   * and a call to retrieve.\n   *\n   * This value should not be explicitly set except within the Autofill web\n   * component library, as doing so will persist the token for the duration\n   * of those component lifecycles.\n   */\n  get sessionToken(): SessionToken {\n    return this.#sessionToken;\n  }\n  set sessionToken(token: SessionToken) {\n    this.#sessionToken = token;\n    this.#persistSessionToken = true;\n  }\n\n  /**\n   * Number of times the session token has been used.\n   *\n   * Kept in sync by {@link SearchSession##getSessionTokenForSuggest}.\n   */\n  #sessionTokenRef = 0;\n\n  #getSessionTokenForSuggest(): SessionToken {\n    if (!this.#persistSessionToken) {\n      // 1. If the session token is expired.\n      // 2. If the session token has been used more than 50 times.\n      if (\n        this.#sessionToken.isExpired() ||\n        this.#sessionTokenRef >= SESSION_TOKEN_NUM\n      ) {\n        this.#sessionToken = new SessionToken();\n        // Reset counter.\n        this.#sessionTokenRef = 0;\n      }\n    }\n\n    this.#sessionTokenRef++;\n    return this.#sessionToken;\n  }\n\n  #suggestions: SuggestionResponse | null;\n\n  /**\n   * The suggestions from the last successful suggest call, if any.\n   */\n  get suggestions(): SuggestionResponse | null {\n    return this.#suggestions;\n  }\n\n  constructor(\n    search: SuggestSearch<\n      Options,\n      Suggestion,\n      SuggestionResponse,\n      RetrieveResponse\n    >,\n    wait = 0\n  ) {\n    super();\n\n    // Set 'suggest' method using debounce.\n    this.#suggestDebounce = debounce(\n      async (\n        searchText: string,\n        options: Partial<Options> = {}\n      ): Promise<void> => {\n        // Refresh abort controller.\n        this.#abort.abort();\n        this.#abort = createAbortController();\n\n        if (!searchText) {\n          this.#suggestions = null;\n          this.fire('suggest', this.#suggestions);\n          return;\n        }\n\n        const sessionToken = this.#getSessionTokenForSuggest();\n\n        try {\n          const res = await this.search.suggest(searchText, {\n            sessionToken,\n            ...options,\n            signal: this.#abort.signal\n          });\n\n          this.#suggestions = res;\n          this.fire('suggest', res);\n        } catch (err) {\n          if (err.name === 'AbortError') {\n            return;\n          }\n\n          this.fire('suggesterror', err);\n        }\n      },\n      wait,\n      () => this.#abort.signal\n    );\n\n    /**\n     * Define properties using {@link Object#defineProperties} so they are readonly during runtime,\n     * not just in TypeScript.\n     */\n    Object.defineProperties(this, {\n      search: {\n        value: search,\n        writable: false\n      },\n      debounce: {\n        value: wait,\n        writable: false\n      }\n    });\n  }\n\n  /**\n   * The {@link AbortController} is used to abort the current suggest, either\n   * because of a new {@link SearchSession#suggest} call, or because\n   * of {@link SearchSession#abort}.\n   *\n   * In both of these cases, a new {@link AbortController} is created,\n   * and the old one is aborted.\n   */\n  #abort = createAbortController();\n\n  #suggestDebounce: (searchText: string, options?: Partial<Options>) => void;\n\n  /** @section {Methods} */\n\n  /**\n   * {@link SearchSession#suggest} is \"part one\" of the two-step interactive search experience,\n   * and each suggestion includes metadata to present to the user.\n   *\n   * Suggestion objects **do not include geographic coordinates**. To get the coordinates of the result, use {@link SearchSession#retrieve}.\n   *\n   * It may be useful to call {@link SearchSession#canRetrieve} before calling this method, as the suggestion may be a reference to\n   * another suggest query. This can also be tested with {@link SearchSession#canSuggest}, and further calls to {@link SearchSession#suggest}.\n   *\n   * Results can be retrieved with the \"suggest\" event.\n   *\n   * @example\n   * ```typescript\n   * const search = new MapboxSearch({ accessToken: 'pk.my-mapbox-access-token' });\n   * const session = new SearchSession(search);\n   *\n   * session.addEventListener('suggest', (res) => {\n   *   presentResultsToUser(res.suggestions);\n   * });\n   *\n   * session.suggest('Washington D.C.');\n   * ```\n   */\n  suggest(\n    searchText: string,\n    options?: Partial<Options>\n  ): Promise<SuggestionResponse> {\n    this.#suggestDebounce(searchText, options);\n\n    return new Promise((resolve, reject) => {\n      let suggestFn: (val: SuggestionResponse) => void;\n      let suggestErrorFn: (val: Error) => void;\n\n      suggestFn = (res) => {\n        this.removeEventListener('suggest', suggestFn);\n        this.removeEventListener('suggesterror', suggestErrorFn);\n        resolve(res);\n      };\n      suggestErrorFn = (err) => {\n        this.removeEventListener('suggest', suggestFn);\n        this.removeEventListener('suggesterror', suggestErrorFn);\n        reject(err);\n      };\n\n      this.addEventListener('suggest', suggestFn);\n      this.addEventListener('suggesterror', suggestErrorFn);\n    });\n  }\n\n  /**\n   * Clears the current suggestions.\n   */\n  clear(): void {\n    this.suggest('');\n  }\n\n  /**\n   * {@link SearchSession#retrieve} is \"part two\" of the two-step interactive search experience and includes\n   * geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * {@link suggestion} is usually a {@link Suggestion} returned from \"part one,\" {@link SearchSession#suggest}.\n   *\n   * Multiple feature suggestions may be returned from a single search query, for example in an airport with\n   * multiple terminals.\n   *\n   * **Legal terms:**\n   *\n   * Due to legal terms from our data sources, results should not be stored in a customer database.\n   * Results should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   */\n  async retrieve(\n    suggestion: Suggestion,\n    options?: Partial<Options>\n  ): Promise<RetrieveResponse> {\n    const res = await this.search.retrieve(suggestion, {\n      sessionToken: this.#sessionToken,\n      ...options\n    });\n\n    if (!this.#persistSessionToken) {\n      // Reset session token.\n      this.#sessionToken = new SessionToken();\n      // Reset counter.\n      this.#sessionTokenRef = 0;\n    }\n\n    this.fire('retrieve', res);\n    return res;\n  }\n\n  /**\n   * Returns true if {@link SearchSession#retrieve} can be called on this suggestion,\n   * false otherwise.\n   *\n   * This indicates the [Mapbox Search API](https://docs.mapbox.com/api/search/search/) has geographic coordinates\n   * for this suggestion.\n   *\n   * This method is mutually exclusive with {@link SearchSession#canSuggest}.\n   */\n  canRetrieve(suggestion: Suggestion): boolean {\n    if (!this.search.canRetrieve) {\n      return true;\n    }\n\n    return this.search.canRetrieve(suggestion);\n  }\n\n  /**\n   * Returns true if {@link SearchSession#suggest} can be called on this suggestion,\n   * false otherwise.\n   *\n   * This indicates the [Mapbox Search API](https://docs.mapbox.com/api/search/search/) wants to do another\n   * suggestion search on this result, and does not have geographic coordinates.\n   *\n   * This method is mutually exclusive with {@link SearchSession#canRetrieve}.\n   */\n  canSuggest(suggestion: Suggestion): boolean {\n    if (!this.search.canSuggest) {\n      return true;\n    }\n\n    return this.search.canSuggest(suggestion);\n  }\n\n  /**\n   * Aborts the current {@link SearchSession#suggest} request.\n   */\n  abort(): void {\n    this.#abort.abort();\n    this.#abort = createAbortController();\n  }\n}\n", "import { FeatureSuggestion, Suggestion } from './search/types';\nimport {\n  AutofillFeatureSuggestion,\n  AutofillSuggestion\n} from './autofill/types';\n\nfunction featureToSuggestion(feature: FeatureSuggestion): Suggestion;\n\nfunction featureToSuggestion(\n  feature: AutofillFeatureSuggestion\n): AutofillSuggestion;\n\n/**\n * Utility function to convert the {@link FeatureSuggestion} properties to a\n * {@link Suggestion} object.\n */\nfunction featureToSuggestion(\n  feature: FeatureSuggestion | AutofillFeatureSuggestion\n): Suggestion | AutofillSuggestion {\n  const { properties } = feature;\n  return {\n    ...properties\n  };\n}\n\nexport { featureToSuggestion };\n"],
  "mappings": "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",
  "names": []
}
