{"ast":null,"code":"var _jsxFileName = \"/Users/alimenzi/Desktop/streamlit/streamlit-react/my_app/my_component/frontend/src/MyForm.tsx\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\";\nimport React, { useState, useCallback } from \"react\";\n/**\n * This is a React-based component template with functional component and hooks.\n */\n\nconst MyForm = () => {\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData();\n  const [numClicks, setNumClicks] = useState(0);\n  const [isFocused, setIsFocused] = useState(false);\n  /** Click handler for our \"Click Me!\" button. */\n\n  const onClicked = useCallback(() => {\n    // Increment `numClicks` state, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    const newValue = numClicks + 1;\n    setNumClicks(newValue);\n    Streamlit.setComponentValue(newValue);\n  }, [numClicks]);\n  /** Focus handler for our \"Click Me!\" button. */\n\n  const onFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  /** Blur handler for our \"Click Me!\" button. */\n\n  const onBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []); // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n\n  const name = renderData.args[\"name\"]; // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n\n  const theme = renderData.theme;\n  const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`;\n    style.border = borderStyling;\n    style.outline = borderStyling;\n  } // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    style: style,\n    onClick: onClicked,\n    disabled: renderData.disabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Click Me!\"));\n};\n\nexport default withStreamlitConnection(MyForm);","map":{"version":3,"names":["Streamlit","withStreamlitConnection","useRenderData","React","useState","useCallback","MyForm","renderData","numClicks","setNumClicks","isFocused","setIsFocused","onClicked","newValue","setComponentValue","onFocus","onBlur","name","args","theme","style","borderStyling","primaryColor","border","outline","disabled"],"sources":["/Users/alimenzi/Desktop/streamlit/streamlit-react/my_app/my_component/frontend/src/MyForm.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport React, { useState, useCallback } from \"react\"\n\n/**\n * This is a React-based component template with functional component and hooks.\n */\nconst MyForm: React.VFC = () => {\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData()\n\n  const [numClicks, setNumClicks] = useState(0)\n  const [isFocused, setIsFocused] = useState(false)\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback(() => {\n    // Increment `numClicks` state, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    const newValue = numClicks + 1\n    setNumClicks(newValue)\n    Streamlit.setComponentValue(newValue)\n  }, [numClicks])\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false)\n  }, [])\n\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n  const name = renderData.args[\"name\"]\n\n  // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const theme = renderData.theme\n  const style: React.CSSProperties = {}\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    style.border = borderStyling\n    style.outline = borderStyling\n  }\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <span>\n      Hello, {name}! &nbsp;\n      <button\n        style={style}\n        onClick={onClicked}\n        disabled={renderData.disabled}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      >\n        Click Me!\n      </button>\n    </span>\n  )\n}\n\nexport default withStreamlitConnection(MyForm)\n"],"mappings":";AAAA,SACEA,SADF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,SAASC,aAAT,QAA8B,qCAA9B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AAEA;AACA;AACA;;AACA,MAAMC,MAAiB,GAAG,MAAM;EAC9B;EACA,MAAMC,UAAU,GAAGL,aAAa,EAAhC;EAEA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,CAAD,CAA1C;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;EAEA;;EACA,MAAMQ,SAAS,GAAGP,WAAW,CAAC,MAAM;IAClC;IACA;IACA,MAAMQ,QAAQ,GAAGL,SAAS,GAAG,CAA7B;IACAC,YAAY,CAACI,QAAD,CAAZ;IACAb,SAAS,CAACc,iBAAV,CAA4BD,QAA5B;EACD,CAN4B,EAM1B,CAACL,SAAD,CAN0B,CAA7B;EAQA;;EACA,MAAMO,OAAO,GAAGV,WAAW,CAAC,MAAM;IAChCM,YAAY,CAAC,IAAD,CAAZ;EACD,CAF0B,EAExB,EAFwB,CAA3B;EAIA;;EACA,MAAMK,MAAM,GAAGX,WAAW,CAAC,MAAM;IAC/BM,YAAY,CAAC,KAAD,CAAZ;EACD,CAFyB,EAEvB,EAFuB,CAA1B,CAtB8B,CA0B9B;EACA;;EACA,MAAMM,IAAI,GAAGV,UAAU,CAACW,IAAX,CAAgB,MAAhB,CAAb,CA5B8B,CA8B9B;EACA;EACA;;EACA,MAAMC,KAAK,GAAGZ,UAAU,CAACY,KAAzB;EACA,MAAMC,KAA0B,GAAG,EAAnC,CAlC8B,CAoC9B;EACA;;EACA,IAAID,KAAJ,EAAW;IACT;IACA;IACA,MAAME,aAAa,GAAI,aAAYX,SAAS,GAAGS,KAAK,CAACG,YAAT,GAAwB,MAAO,EAA3E;IACAF,KAAK,CAACG,MAAN,GAAeF,aAAf;IACAD,KAAK,CAACI,OAAN,GAAgBH,aAAhB;EACD,CA5C6B,CA8C9B;EACA;EACA;EACA;;;EACA,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cACUJ,IADV,yBAEE;IACE,KAAK,EAAEG,KADT;IAEE,OAAO,EAAER,SAFX;IAGE,QAAQ,EAAEL,UAAU,CAACkB,QAHvB;IAIE,OAAO,EAAEV,OAJX;IAKE,MAAM,EAAEC,MALV;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,eAFF,CADF;AAcD,CAhED;;AAkEA,eAAef,uBAAuB,CAACK,MAAD,CAAtC"},"metadata":{},"sourceType":"module"}