{"ast":null,"code":"var _jsxFileName = \"/Users/alimenzi/Desktop/streamlit/streamlit-react/my_app/my_component/frontend/src/MyForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Streamlit } from \"streamlit-component-lib\";\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\";\nimport React, { useState, useCallback } from \"react\";\nimport { AddressAutofill } from \"@mapbox/search-js-react\";\n/**\n * This is a React-based component template with functional component and hooks.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyForm = () => {\n  _s();\n\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData();\n  const token = \"pk.eyJ1IjoiYWxpY2Vtc2FwaWVudCIsImEiOiJjbDJ5MHBtZ3MxMHk0M25wZmFnaWdiaWx4In0.aTDpzRDIUG50F-Iopnhb4Q\";\n  const defaultAddress = {\n    address: \"\",\n    unit: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    postcode: \"\"\n  };\n  const [address, setAddress] = useState(defaultAddress);\n  const [isFocused, setIsFocused] = useState(false);\n  /** Click handler for our \"Click Me!\" button. */\n\n  const handleInputChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setAddress({ ...address,\n      [name]: value\n    });\n  }, [address]);\n  const handleSubmit = useCallback(e => {\n    e.preventDefault();\n    console.log(address);\n    const stringAddress = JSON.stringify(address);\n    console.log(\"string version: \" + stringAddress);\n    Streamlit.setComponentValue(address);\n  }, [address]);\n  /** Focus handler for our \"Click Me!\" button. */\n\n  const onFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  /** Blur handler for our \"Click Me!\" button. */\n\n  const onBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []); // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n\n  const name = renderData.args[\"name\"]; // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n\n  const theme = renderData.theme;\n  const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`;\n    style.border = borderStyling;\n    style.outline = borderStyling;\n  } // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Hello, \", name, \"! \\xA0\", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(AddressAutofill, {\n        accessToken: token,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"address\",\n          value: address.address,\n          placeholder: \"Address\",\n          type: \"text\",\n          autoComplete: \"address-line1\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"unit\",\n        value: address.unit,\n        placeholder: \"Unit number\",\n        type: \"text\",\n        autoComplete: \"address-line2\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"city\",\n        value: address.city,\n        placeholder: \"City\",\n        type: \"text\",\n        autoComplete: \"address-level2\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"state\",\n        value: address.state,\n        placeholder: \"State\",\n        type: \"text\",\n        autoComplete: \"address-level1\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"country\",\n        value: address.country,\n        placeholder: \"Country\",\n        type: \"text\",\n        autoComplete: \"country\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"postcode\",\n        value: address.postcode,\n        placeholder: \"Postcode\",\n        type: \"text\",\n        autoComplete: \"postal-code\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}; // export default withStreamlitConnection(MyForm)\n\n\n_s(MyForm, \"KXpciHTBsuJo376askH/YaL2rSY=\", false, function () {\n  return [useRenderData];\n});\n\n_c = MyForm;\nexport default MyForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyForm\");","map":{"version":3,"names":["Streamlit","useRenderData","React","useState","useCallback","AddressAutofill","MyForm","renderData","token","defaultAddress","address","unit","city","state","country","postcode","setAddress","isFocused","setIsFocused","handleInputChange","e","name","value","target","handleSubmit","preventDefault","console","log","stringAddress","JSON","stringify","setComponentValue","onFocus","onBlur","args","theme","style","borderStyling","primaryColor","border","outline"],"sources":["/Users/alimenzi/Desktop/streamlit/streamlit-react/my_app/my_component/frontend/src/MyForm.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport React, { useState, useCallback } from \"react\"\nimport { AddressAutofill } from \"@mapbox/search-js-react\"\n\n/**\n * This is a React-based component template with functional component and hooks.\n */\nconst MyForm: React.VFC = () => {\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData()\n\n  const token =\n    \"pk.eyJ1IjoiYWxpY2Vtc2FwaWVudCIsImEiOiJjbDJ5MHBtZ3MxMHk0M25wZmFnaWdiaWx4In0.aTDpzRDIUG50F-Iopnhb4Q\"\n\n  const defaultAddress = {\n    address: \"\",\n    unit: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    postcode: \"\",\n  }\n  const [address, setAddress] = useState(defaultAddress)\n  const [isFocused, setIsFocused] = useState(false)\n\n  /** Click handler for our \"Click Me!\" button. */\n  const handleInputChange = useCallback(\n    (e) => {\n      const { name, value } = e.target\n      setAddress({\n        ...address,\n        [name]: value,\n      })\n    },\n    [address]\n  )\n\n  const handleSubmit = useCallback(\n    (e) => {\n      e.preventDefault()\n      console.log(address)\n      const stringAddress = JSON.stringify(address)\n      console.log(\"string version: \" + stringAddress)\n      Streamlit.setComponentValue(address)\n    },\n    [address]\n  )\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false)\n  }, [])\n\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n  const name = renderData.args[\"name\"]\n\n  // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const theme = renderData.theme\n  const style: React.CSSProperties = {}\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    style.border = borderStyling\n    style.outline = borderStyling\n  }\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <div>\n      Hello, {name}! &nbsp;\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <AddressAutofill accessToken={token}>\n          <input\n            name=\"address\"\n            value={address.address}\n            placeholder=\"Address\"\n            type=\"text\"\n            autoComplete=\"address-line1\"\n            onChange={handleInputChange}\n          />\n        </AddressAutofill>\n        <input\n          name=\"unit\"\n          value={address.unit}\n          placeholder=\"Unit number\"\n          type=\"text\"\n          autoComplete=\"address-line2\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"city\"\n          value={address.city}\n          placeholder=\"City\"\n          type=\"text\"\n          autoComplete=\"address-level2\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"state\"\n          value={address.state}\n          placeholder=\"State\"\n          type=\"text\"\n          autoComplete=\"address-level1\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"country\"\n          value={address.country}\n          placeholder=\"Country\"\n          type=\"text\"\n          autoComplete=\"country\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"postcode\"\n          value={address.postcode}\n          placeholder=\"Postcode\"\n          type=\"text\"\n          autoComplete=\"postal-code\"\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  )\n}\n\n// export default withStreamlitConnection(MyForm)\nexport default MyForm\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}