{"ast":null,"code":"var _jsxFileName = \"/Users/alimenzi/Desktop/streamlit/streamlit-react/my_app/my_component/frontend/src/MyForm.tsx\";\nimport { Streamlit } from \"streamlit-component-lib\";\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\";\nimport React, { useState, useCallback } from \"react\";\nimport { AddressAutofill } from \"@mapbox/search-js-react\";\n/**\n * This is a React-based component template with functional component and hooks.\n */\n\nconst MyForm = () => {\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData();\n  const token = \"add your own API Key\";\n  const defaultAddress = {\n    address: \"\",\n    unit: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    postcode: \"\"\n  };\n  const [address, setAddress] = useState(defaultAddress);\n  const [isFocused, setIsFocused] = useState(false);\n  /** Click handler for our \"Click Me!\" button. */\n\n  const handleInputChange = useCallback(e => {\n    // Increment `numClicks` state, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    const {\n      name,\n      value\n    } = e.target;\n    setAddress({ ...address,\n      [name]: value\n    }); // Streamlit.setComponentValue(address)\n  }, [address]);\n  const handleSubmit = useCallback(e => {\n    e.preventDefault(); // Increment `numClicks` state, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    // const { name, value } = e.target;\n    // setAddress({\n    //   ...address,\n    //   [name]: value,\n    // });\n\n    Streamlit.setComponentValue(address);\n  }, [address]);\n  /** Focus handler for our \"Click Me!\" button. */\n\n  const onFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  /** Blur handler for our \"Click Me!\" button. */\n\n  const onBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []); // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n\n  const name = renderData.args[\"name\"]; // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n\n  const theme = renderData.theme;\n  const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`;\n    style.border = borderStyling;\n    style.outline = borderStyling;\n  } // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddressAutofill, {\n    accessToken: token,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"address\",\n    value: address.address,\n    placeholder: \"Address\",\n    type: \"text\",\n    autoComplete: \"address-line1\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"unit\",\n    value: address.unit,\n    placeholder: \"Unit number\",\n    type: \"text\",\n    autoComplete: \"address-line2\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"city\",\n    value: address.city,\n    placeholder: \"City\",\n    type: \"text\",\n    autoComplete: \"address-level2\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"state\",\n    value: address.state,\n    placeholder: \"State\",\n    type: \"text\",\n    autoComplete: \"address-level1\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"country\",\n    value: address.country,\n    placeholder: \"Country\",\n    type: \"text\",\n    autoComplete: \"country\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"postcode\",\n    value: address.postcode,\n    placeholder: \"Postcode\",\n    type: \"text\",\n    autoComplete: \"postal-code\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n}; // export default withStreamlitConnection(MyForm)\n\n\nexport default MyForm;","map":{"version":3,"names":["Streamlit","useRenderData","React","useState","useCallback","AddressAutofill","MyForm","renderData","token","defaultAddress","address","unit","city","state","country","postcode","setAddress","isFocused","setIsFocused","handleInputChange","e","name","value","target","handleSubmit","preventDefault","setComponentValue","onFocus","onBlur","args","theme","style","borderStyling","primaryColor","border","outline"],"sources":["/Users/alimenzi/Desktop/streamlit/streamlit-react/my_app/my_component/frontend/src/MyForm.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport React, { useState, useCallback } from \"react\"\nimport { AddressAutofill } from \"@mapbox/search-js-react\"\n\n/**\n * This is a React-based component template with functional component and hooks.\n */\nconst MyForm: React.VFC = () => {\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData()\n\n  const token = \"add your own API Key\"\n  const defaultAddress = {\n    address: \"\",\n    unit: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    postcode: \"\",\n  }\n  const [address, setAddress] = useState(defaultAddress)\n  const [isFocused, setIsFocused] = useState(false)\n\n  /** Click handler for our \"Click Me!\" button. */\n  const handleInputChange = useCallback(\n    (e) => {\n      // Increment `numClicks` state, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      const { name, value } = e.target\n      setAddress({\n        ...address,\n        [name]: value,\n      })\n      // Streamlit.setComponentValue(address)\n    },\n    [address]\n  )\n\n  const handleSubmit = useCallback(\n    (e) => {\n      e.preventDefault()\n      // Increment `numClicks` state, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      // const { name, value } = e.target;\n      // setAddress({\n      //   ...address,\n      //   [name]: value,\n      // });\n      Streamlit.setComponentValue(address)\n    },\n    [address]\n  )\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false)\n  }, [])\n\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n  const name = renderData.args[\"name\"]\n\n  // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const theme = renderData.theme\n  const style: React.CSSProperties = {}\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    style.border = borderStyling\n    style.outline = borderStyling\n  }\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <div>\n      Hello, {name}! &nbsp;\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <AddressAutofill accessToken={token}>\n          <input\n            name=\"address\"\n            value={address.address}\n            placeholder=\"Address\"\n            type=\"text\"\n            autoComplete=\"address-line1\"\n            onChange={handleInputChange}\n          />\n        </AddressAutofill>\n        <input\n          name=\"unit\"\n          value={address.unit}\n          placeholder=\"Unit number\"\n          type=\"text\"\n          autoComplete=\"address-line2\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"city\"\n          value={address.city}\n          placeholder=\"City\"\n          type=\"text\"\n          autoComplete=\"address-level2\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"state\"\n          value={address.state}\n          placeholder=\"State\"\n          type=\"text\"\n          autoComplete=\"address-level1\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"country\"\n          value={address.country}\n          placeholder=\"Country\"\n          type=\"text\"\n          autoComplete=\"country\"\n          onChange={handleInputChange}\n        />\n        <input\n          name=\"postcode\"\n          value={address.postcode}\n          placeholder=\"Postcode\"\n          type=\"text\"\n          autoComplete=\"postal-code\"\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  )\n}\n\n// export default withStreamlitConnection(MyForm)\nexport default MyForm\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}