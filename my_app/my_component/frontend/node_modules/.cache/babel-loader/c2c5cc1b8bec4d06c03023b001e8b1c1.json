{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n}; // src/index.ts\n\n\nimport \"@mapbox/search-js-web\";\nimport { config } from \"@mapbox/search-js-web\"; // src/components/AddressAutofill.tsx\n\nimport React, { useRef, useEffect, useImperativeHandle } from \"react\";\nvar AddressAutofill = React.forwardRef((props, refProp) => {\n  const {\n    accessToken,\n    options,\n    theme,\n    children,\n    onSuggest,\n    onSuggestError,\n    onRetrieve\n  } = props;\n  const ref = useRef();\n  useImperativeHandle(refProp, () => ({\n    focus: () => {\n      if (ref.current) return ref.current.focus();\n      throw new Error(\"AddressAutofill is not mounted\");\n    }\n  }));\n  useEffect(() => {\n    if (ref.current) ref.current.options = options;\n  }, [ref.current, options]);\n  useEffect(() => {\n    if (ref.current) ref.current.theme = theme;\n  }, [ref.current, theme]);\n  useEffect(() => {\n    const node = ref.current;\n    if (!node) return;\n    if (!onSuggest) return;\n\n    const fn = e => onSuggest(e.detail);\n\n    node.addEventListener(\"suggest\", fn);\n    return () => {\n      node.removeEventListener(\"suggest\", fn);\n    };\n  }, [ref.current, onSuggest]);\n  useEffect(() => {\n    const node = ref.current;\n    if (!node) return;\n    if (!onSuggestError) return;\n\n    const fn = e => onSuggestError(e.detail);\n\n    node.addEventListener(\"suggesterror\", fn);\n    return () => {\n      node.removeEventListener(\"suggesterror\", fn);\n    };\n  }, [ref.current, onSuggestError]);\n  useEffect(() => {\n    const node = ref.current;\n    if (!node) return;\n    if (!onRetrieve) return;\n\n    const fn = e => onRetrieve(e.detail);\n\n    node.addEventListener(\"retrieve\", fn);\n    return () => {\n      node.removeEventListener(\"retrieve\", fn);\n    };\n  }, [ref.current, onRetrieve]);\n  useEffect(() => {\n    if (ref.current) ref.current.accessToken = accessToken;\n  }, [ref.current, accessToken]);\n  return /* @__PURE__ */React.createElement(\"mapbox-address-autofill\", {\n    ref\n  }, children);\n}); // src/components/SearchBox.tsx\n\nimport React2, { useRef as useRef2, useEffect as useEffect2, useImperativeHandle as useImperativeHandle2 } from \"react\";\nvar SearchBox = React2.forwardRef((props, refProp) => {\n  const {\n    accessToken,\n    options,\n    theme,\n    map,\n    value,\n    onChange,\n    onSuggest,\n    onSuggestError,\n    onRetrieve\n  } = props;\n  const ref = useRef2();\n  useImperativeHandle2(refProp, () => ({\n    focus: () => {\n      if (ref.current) return ref.current.focus();\n      throw new Error(\"SearchBox is not mounted\");\n    }\n  }));\n  useEffect2(() => {\n    if (ref.current) ref.current.options = options;\n  }, [ref.current, options]);\n  useEffect2(() => {\n    if (ref.current) ref.current.theme = theme;\n  }, [ref.current, theme]);\n  useEffect2(() => {\n    if (ref.current) ref.current.value = value;\n  }, [ref.current, value]);\n  useEffect2(() => {\n    const node = ref.current;\n    if (!node) return;\n    node.bindMap(map);\n    return () => {\n      node.unbindMap();\n    };\n  }, [ref.current, map]);\n  useEffect2(() => {\n    const node = ref.current;\n    if (!node) return;\n\n    const fn = e => onSuggest(e.detail);\n\n    node.addEventListener(\"suggest\", fn);\n    return () => {\n      node.removeEventListener(\"suggest\", fn);\n    };\n  }, [ref.current, onSuggest]);\n  useEffect2(() => {\n    const node = ref.current;\n    if (!node) return;\n\n    const fn = e => onSuggestError(e.detail);\n\n    node.addEventListener(\"suggesterror\", fn);\n    return () => {\n      node.removeEventListener(\"suggesterror\", fn);\n    };\n  }, [ref.current, onSuggestError]);\n  useEffect2(() => {\n    const node = ref.current;\n    if (!node) return;\n\n    const fn = e => onRetrieve(e.detail);\n\n    node.addEventListener(\"retrieve\", fn);\n    return () => {\n      node.removeEventListener(\"retrieve\", fn);\n    };\n  }, [ref.current, onRetrieve]);\n  useEffect2(() => {\n    const node = ref.current;\n    if (!node) return;\n\n    const fn = e => onChange(e.detail);\n\n    node.addEventListener(\"input\", fn);\n    return () => {\n      node.removeEventListener(\"input\", fn);\n    };\n  }, [ref.current, onChange]);\n  useEffect2(() => {\n    if (ref.current) ref.current.accessToken = accessToken;\n  }, [ref.current, accessToken]);\n  return /* @__PURE__ */React2.createElement(\"mapbox-search-box\", {\n    ref\n  });\n}); // src/components/AddressMinimap.tsx\n\nimport React3, { useRef as useRef3, useEffect as useEffect3 } from \"react\";\n\nfunction AddressMinimap(props) {\n  const {\n    canAdjustMarker = false,\n    keepMarkerCentered = false,\n    markerAnchor = \"bottom\",\n    onSaveMarkerLocation,\n    show = false,\n    accessToken,\n    feature = null,\n    satelliteToggle = false,\n    theme,\n    mapStyleMode = \"default\",\n    defaultMapStyle = [\"mapbox\", \"streets-v11\"]\n  } = props;\n  const ref = useRef3();\n  useEffect3(() => {\n    if (!ref.current) return;\n\n    if (show) {\n      ref.current.show();\n    } else {\n      ref.current.hide();\n    }\n  }, [ref.current, show]);\n  useEffect3(() => {\n    if (ref.current) ref.current.theme = theme;\n  }, [ref.current, theme]);\n  useEffect3(() => {\n    if (ref.current) ref.current.feature = show ? feature : null;\n  }, [ref.current, feature, show]);\n  useEffect3(() => {\n    if (ref.current) ref.current.mapStyleMode = mapStyleMode;\n  }, [ref.current, mapStyleMode]);\n  useEffect3(() => {\n    if (ref.current) ref.current.defaultMapStyle = defaultMapStyle;\n  }, [ref.current, defaultMapStyle]);\n  useEffect3(() => {\n    if (ref.current) ref.current.accessToken = accessToken;\n  }, [ref.current, accessToken]);\n  useEffect3(() => {\n    if (ref.current) ref.current.onSaveMarkerLocation = onSaveMarkerLocation;\n  }, [ref.current, onSaveMarkerLocation]);\n  return /* @__PURE__ */React3.createElement(\"mapbox-address-minimap\", {\n    ref,\n    \"can-adjust-marker\": canAdjustMarker,\n    \"keep-marker-centered\": keepMarkerCentered,\n    \"marker-anchor\": markerAnchor,\n    \"satellite-toggle\": satelliteToggle\n  });\n} // src/hooks/useEvented.tsx\n\n\nimport { useEffect as useEffect4, useRef as useRef4 } from \"react\";\n\nfunction useEvented(evented, eventName, cb) {\n  const cbRef = useRef4(cb);\n  useEffect4(() => {\n    cbRef.current = cb;\n  });\n  useEffect4(() => {\n    if (!evented) return;\n\n    const fn = object => cbRef.current(object);\n\n    evented.addEventListener(eventName, fn);\n    return () => {\n      evented.removeEventListener(eventName, fn);\n    };\n  }, [evented, eventName, cbRef]);\n} // src/hooks/useMapboxAutofill.tsx\n\n\nimport { useEffect as useEffect5, useMemo } from \"react\";\nimport { MapboxAutofill } from \"@mapbox/search-js-core\";\nvar DEFAULTS = MapboxAutofill.defaults;\n\nfunction useMapboxAutofill(options) {\n  const autofill = useMemo(() => {\n    return new MapboxAutofill();\n  }, []);\n  useEffect5(() => {\n    const _a = options,\n          {\n      accessToken\n    } = _a,\n          restOptions = __objRest(_a, [\"accessToken\"]);\n\n    autofill.accessToken = accessToken;\n    autofill.defaults = __spreadValues(__spreadValues({}, DEFAULTS), restOptions);\n  }, [options]);\n  return autofill;\n} // src/hooks/useMapboxSearch.tsx\n\n\nimport { useEffect as useEffect6, useMemo as useMemo2 } from \"react\";\nimport { MapboxSearch } from \"@mapbox/search-js-core\";\nvar DEFAULTS2 = MapboxSearch.defaults;\n\nfunction useMapboxSearch(options) {\n  const search = useMemo2(() => {\n    return new MapboxSearch();\n  }, []);\n  useEffect6(() => {\n    const _a = options,\n          {\n      accessToken\n    } = _a,\n          restOptions = __objRest(_a, [\"accessToken\"]);\n\n    search.accessToken = accessToken;\n    search.defaults = __spreadValues(__spreadValues({}, DEFAULTS2), restOptions);\n  }, [options]);\n  return search;\n} // src/hooks/useSearchSession.tsx\n\n\nimport { MapboxSearch as MapboxSearch2, SearchSession } from \"@mapbox/search-js-core\";\nimport { useMemo as useMemo3 } from \"react\";\n\nfunction useSearchSession(search) {\n  const searchSession = useMemo3(() => {\n    return new SearchSession(search);\n  }, [search]);\n\n  if (search instanceof MapboxSearch2) {\n    return searchSession;\n  } else {\n    return searchSession;\n  }\n} // src/hooks/useConfirmAddress.tsx\n\n\nimport { useMemo as useMemo4, useRef as useRef5 } from \"react\";\nimport { confirmAddress } from \"@mapbox/search-js-web\";\n\nfunction useConfirmAddress() {\n  let optionsArg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const formRef = useRef5(null);\n  return useMemo4(() => {\n    return {\n      formRef,\n      showConfirm: () => confirmAddress(formRef.current, optionsArg)\n    };\n  }, [formRef, optionsArg]);\n}\n\nexport { AddressAutofill, AddressMinimap, SearchBox, config, useConfirmAddress, useEvented, useMapboxAutofill, useMapboxSearch, useSearchSession };","map":{"version":3,"mappings":"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","names":["AddressAutofill","React","forwardRef","props","refProp","accessToken","options","theme","children","onSuggest","onSuggestError","onRetrieve","ref","useRef","useImperativeHandle","focus","current","Error","useEffect","node","fn","e","detail","addEventListener","removeEventListener","SearchBox","React2","map","value","onChange","useRef2","useImperativeHandle2","useEffect2","bindMap","unbindMap","canAdjustMarker","keepMarkerCentered","markerAnchor","onSaveMarkerLocation","show","feature","satelliteToggle","mapStyleMode","defaultMapStyle","useRef3","useEffect3","hide","evented","eventName","cb","cbRef","useRef4","useEffect4","object","DEFAULTS","MapboxAutofill","defaults","autofill","useMemo","useEffect5","_a","restOptions","__spreadValues","DEFAULTS2","MapboxSearch","search","useMemo2","useEffect6","searchSession","useMemo3","SearchSession","MapboxSearch2","optionsArg","formRef","useRef5","useMemo4","showConfirm","confirmAddress"],"sources":["../src/index.ts","../src/components/AddressAutofill.tsx","../src/components/SearchBox.tsx","../src/components/AddressMinimap.tsx","../src/hooks/useEvented.tsx","../src/hooks/useMapboxAutofill.tsx","../src/hooks/useMapboxSearch.tsx","../src/hooks/useSearchSession.tsx","../src/hooks/useConfirmAddress.tsx"],"sourcesContent":["import '@mapbox/search-js-web';\nexport { config } from '@mapbox/search-js-web';\n\nexport { AddressAutofill } from './components/AddressAutofill';\nexport { SearchBox } from './components/SearchBox';\nexport { AddressMinimap } from './components/AddressMinimap';\n\nexport { useEvented } from './hooks/useEvented';\nexport { useMapboxAutofill } from './hooks/useMapboxAutofill';\nexport { useMapboxSearch } from './hooks/useMapboxSearch';\nexport { useSearchSession } from './hooks/useSearchSession';\nexport { useConfirmAddress } from './hooks/useConfirmAddress';\n","/* eslint-disable @typescript-eslint/no-namespace */\n\nimport React, { useRef, useEffect, useImperativeHandle } from 'react';\n\nimport {\n  AutofillOptions,\n  AutofillSuggestionResponse,\n  AutofillRetrieveResponse\n} from '@mapbox/search-js-core';\nimport {\n  MapboxAddressAutofill,\n  Theme,\n  MapboxHTMLEvent\n} from '@mapbox/search-js-web';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      'mapbox-address-autofill': any;\n    }\n  }\n}\n\n/**\n * @typedef AddressAutofillRefType\n */\nexport interface AddressAutofillRefType {\n  /**\n   * @see {@link MapboxAddressAutofill#focus}\n   */\n  focus: typeof MapboxAddressAutofill.prototype.focus;\n}\n\n/**\n * @typedef AddressAutofillProps\n */\nexport interface AddressAutofillProps {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n  /**\n   * Options to pass to the underlying {@link MapboxAutofill} interface.\n   * @example\n   * ```typescript\n   * <AddressAutofill options={{\n   *  language: 'en',\n   *  country: 'US',\n   * }}>\n   * ```\n   */\n  options?: Partial<AutofillOptions>;\n  /**\n   * The {@link Theme} to use for styling the autofill and confirmation dialog\n   * components.\n   * @example\n   * ```typescript\n   * <AddressAutofill theme={{\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * }}>\n   * ```\n   */\n  theme?: Theme;\n\n  /**\n   * Children to render inside the autofill component. This **must** include\n   * an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) element\n   * with either autocomplete type `\"street-address\"` or `\"address-line1\"`.\n   */\n  children: React.ReactChild;\n\n  /**\n   * Fired when the user is typing in the input and provides a list of suggestions.\n   * The underlying response from {@link MapboxAutofill} is passed.\n   */\n  onSuggest?: (res: AutofillSuggestionResponse) => void;\n  /**\n   * Fired when {@link MapboxAutofill} has errored providing a list of suggestions.\n   * The underlying error is passed.\n   */\n  onSuggestError?: (error: Error) => void;\n  /**\n   * Fired when the user has selected a suggestion, before the form is autofilled.\n   * The underlying response from {@link MapboxAutofill} is passed.\n   */\n  onRetrieve?: (res: AutofillRetrieveResponse) => void;\n}\n\n/**\n * `<AddressAutofill>` is a React component that wraps an address\n * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) element with intelligent, location-aware autocomplete functionality.\n *\n * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).\n *\n * This component must be a descendant of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form), and the form\n * must have inputs with proper HTML `autocomplete` attributes. If your application works with browser autofill, you may already have\n * this functionality.\n * - [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n * - [Autofill](https://web.dev/learn/forms/autofill/)\n *\n * Internally, this wraps the [`<mapbox-address-autofill>`](https://docs.mapbox.com/mapbox-search-js/api/web/autofill/#mapboxaddressautofill) element.\n *\n * @function AddressAutofill\n * @param {AddressAutofillProps} props\n * @example\n * ```typescript\n * export function Component() {\n *   const [value, setValue] = React.useState('');\n *   return (\n *     <form>\n *       <AddressAutofill accessToken={<your access token here>}>\n *         <input\n *           autoComplete=\"shipping address-line1\"\n *           value={value}\n *           onChange={(e) => setValue(e.target.value)}\n *         />\n *       </AddressAutofill>\n *     </form>\n *   );\n * }\n * ```\n */\nexport const AddressAutofill = React.forwardRef(\n  (props: AddressAutofillProps, refProp): React.ReactElement => {\n    const {\n      accessToken,\n      options,\n      theme,\n      children,\n      onSuggest,\n      onSuggestError,\n      onRetrieve\n    } = props;\n    const ref = useRef<MapboxAddressAutofill>();\n\n    useImperativeHandle(refProp, () => ({\n      focus: () => {\n        if (ref.current) return ref.current.focus();\n        throw new Error('AddressAutofill is not mounted');\n      }\n    }));\n\n    // Update options.\n    useEffect(() => {\n      if (ref.current) ref.current.options = options;\n    }, [ref.current, options]);\n\n    // Update theme.\n    useEffect(() => {\n      if (ref.current) ref.current.theme = theme;\n    }, [ref.current, theme]);\n\n    // Update onSuggest.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      if (!onSuggest) return;\n\n      const fn = (e: MapboxHTMLEvent<AutofillSuggestionResponse>) =>\n        onSuggest(e.detail);\n\n      node.addEventListener('suggest', fn);\n      return () => {\n        node.removeEventListener('suggest', fn);\n      };\n    }, [ref.current, onSuggest]);\n\n    // Update onSuggestError.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      if (!onSuggestError) return;\n\n      const fn = (e: MapboxHTMLEvent<Error>) => onSuggestError(e.detail);\n\n      node.addEventListener('suggesterror', fn);\n      return () => {\n        node.removeEventListener('suggesterror', fn);\n      };\n    }, [ref.current, onSuggestError]);\n\n    // Update onRetrieve.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      if (!onRetrieve) return;\n\n      const fn = (e: MapboxHTMLEvent<AutofillRetrieveResponse>) =>\n        onRetrieve(e.detail);\n\n      node.addEventListener('retrieve', fn);\n      return () => {\n        node.removeEventListener('retrieve', fn);\n      };\n    }, [ref.current, onRetrieve]);\n\n    // Update accessToken.\n    useEffect(() => {\n      if (ref.current) ref.current.accessToken = accessToken;\n    }, [ref.current, accessToken]);\n\n    return (\n      <mapbox-address-autofill ref={ref}>{children}</mapbox-address-autofill>\n    );\n  }\n);\n","/* eslint-disable @typescript-eslint/no-namespace */\n\nimport React, { useRef, useEffect, useImperativeHandle } from 'react';\n\nimport {\n  Options,\n  SuggestionResponse,\n  RetrieveResponse\n} from '@mapbox/search-js-core';\nimport { MapboxSearchBox, Theme, MapboxHTMLEvent } from '@mapbox/search-js-web';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      'mapbox-search-box': any;\n    }\n  }\n}\n\n/**\n * @typedef SearchBoxRefType\n */\nexport interface SearchBoxRefType {\n  /**\n   * @see {@link MapboxSearchBox#focus}\n   */\n  focus: typeof MapboxSearchBox.prototype.focus;\n}\n\n/**\n * @typedef SearchBoxProps\n */\nexport interface SearchBoxProps {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n  /**\n   * Options to pass to the underlying {@link MapboxSearch} interface.\n   * @example\n   * ```typescript\n   * <SearchBox options={{\n   *  language: 'en',\n   *  country: 'US',\n   * }}>\n   * ```\n   */\n  options?: Partial<Options>;\n  /**\n   * The {@link Theme} to use for styling the search box.\n   * @example\n   * ```typescript\n   * <SearchBox theme={{\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * }}>\n   * ```\n   */\n  theme?: Theme;\n\n  /**\n   * If specified, the map will be centered on the retrieved suggestion.\n   */\n  map?: mapboxgl.Map;\n\n  /**\n   * Value to display in the search box.\n   */\n  value?: string;\n  /**\n   * Callback for when the value changes.\n   */\n  onChange?: (value: string) => void;\n\n  /**\n   * Fired when the user is typing in the input and provides a list of suggestions.\n   * The underlying response from {@link MapboxSearch} is passed.\n   */\n  onSuggest: (res: SuggestionResponse) => void;\n  /**\n   * Fired when {@link MapboxSearch} has errored providing a list of suggestions.\n   * The underlying error is passed.\n   */\n  onSuggestError: (error: Error) => void;\n  /**\n   * Fired when the user has selected a suggestion.\n   * The underlying response from {@link MapboxSearch} is passed.\n   */\n  onRetrieve: (res: RetrieveResponse) => void;\n}\n\n/**\n * `<SearchBox>` is a React component that provides an interactive search box,\n * powered by the Mapbox Search API.\n *\n * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).\n *\n * Internally, this wraps the [`<mapbox-search-box>`](https://docs.mapbox.com/mapbox-search-js/api/web/search/#mapboxsearchbox) element.\n *\n * @function SearchBox\n * @param {SearchBoxProps} props\n * @example\n * ```typescript\n * export function Component() {\n *   const [value, setValue] = React.useState('');\n *   return (\n *     <form>\n *       <SearchBox accessToken={<your access token here>} />\n *     </form>\n *   );\n * }\n * ```\n */\nexport const SearchBox = React.forwardRef(\n  (props: SearchBoxProps, refProp): React.ReactElement => {\n    const {\n      accessToken,\n      options,\n      theme,\n      map,\n      value,\n      onChange,\n      onSuggest,\n      onSuggestError,\n      onRetrieve\n    } = props;\n    const ref = useRef<MapboxSearchBox>();\n\n    useImperativeHandle(refProp, () => ({\n      focus: () => {\n        if (ref.current) return ref.current.focus();\n        throw new Error('SearchBox is not mounted');\n      }\n    }));\n\n    // Update options.\n    useEffect(() => {\n      if (ref.current) ref.current.options = options;\n    }, [ref.current, options]);\n\n    // Update theme.\n    useEffect(() => {\n      if (ref.current) ref.current.theme = theme;\n    }, [ref.current, theme]);\n\n    // Update value.\n    useEffect(() => {\n      if (ref.current) ref.current.value = value;\n    }, [ref.current, value]);\n\n    // Update map.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      node.bindMap(map);\n      return () => {\n        node.unbindMap();\n      };\n    }, [ref.current, map]);\n\n    // Update onSuggest.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<SuggestionResponse>) =>\n        onSuggest(e.detail);\n\n      node.addEventListener('suggest', fn);\n      return () => {\n        node.removeEventListener('suggest', fn);\n      };\n    }, [ref.current, onSuggest]);\n\n    // Update onSuggestError.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<Error>) => onSuggestError(e.detail);\n\n      node.addEventListener('suggesterror', fn);\n      return () => {\n        node.removeEventListener('suggesterror', fn);\n      };\n    }, [ref.current, onSuggestError]);\n\n    // Update onRetrieve.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<RetrieveResponse>) => onRetrieve(e.detail);\n\n      node.addEventListener('retrieve', fn);\n      return () => {\n        node.removeEventListener('retrieve', fn);\n      };\n    }, [ref.current, onRetrieve]);\n\n    // Update onChange.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<string>) => onChange(e.detail);\n\n      node.addEventListener('input', fn);\n      return () => {\n        node.removeEventListener('input', fn);\n      };\n    }, [ref.current, onChange]);\n\n    // Update accessToken.\n    useEffect(() => {\n      if (ref.current) ref.current.accessToken = accessToken;\n    }, [ref.current, accessToken]);\n\n    return <mapbox-search-box ref={ref} />;\n  }\n);\n","/* eslint-disable @typescript-eslint/no-namespace */\n\nimport React, { useRef, useEffect } from 'react';\n\nimport {\n  Anchor,\n  MapboxAddressMinimap,\n  MapStyleMode,\n  Theme\n} from '@mapbox/search-js-web';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      'mapbox-address-minimap': any;\n    }\n  }\n}\n\n/**\n * @typedef AddressMinimapProps\n */\nexport interface AddressMinimapProps {\n  /**\n   * If `true`, the marker can be moved around the map. Defaults to `false`.\n   *\n   * When editable, the marker can be moved around the map and the updated\n   * location can be referenced from the {@link AddressMinimapProps#onSaveMarkerLocation} callback.\n   */\n  canAdjustMarker?: boolean;\n  /**\n   * If `true`, the map when panned moves around the marker, keeping the marker\n   * centered. Defaults to `false`.\n   */\n  keepMarkerCentered?: boolean;\n  /**\n   * The anchor of the marker, relative to center of the expanded size. Defaults to `'bottom'`.\n   */\n  markerAnchor?: Anchor;\n  /**\n   * A client-defined callback that is triggered when the \"Save\" button is clicked in the editing interface,\n   * and gives access to the adjusted marker coordinate.\n   */\n  onSaveMarkerLocation?: (coordinate: [number, number]) => void;\n\n  /**\n   * Must be `true` for the minimap to be shown, in addition to {@link AddressMinimapProps#feature}\n   * being present.\n   */\n  show?: boolean;\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   *\n   * If not explicitly set on the component, this will reference the value in the global config object.\n   */\n  accessToken?: string;\n  /**\n   * A [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) Feature representing\n   * a [Point](https://geojson.org/geojson-spec.html#point) geometry.\n   *\n   * The minimap is hidden unless {@link AddressMinimapProps#feature} is truthy.\n   */\n  feature?: GeoJSON.Feature<GeoJSON.Point>;\n\n  /**\n   * If `true`, the map will have an image toggle between Map and Satellite styles.\n   */\n  satelliteToggle?: boolean;\n  /**\n   * The {@link Theme} to use for styling interface buttons.\n   * @example\n   * ```typescript\n   * <AddressMinimap theme={{\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * }}>\n   * ```\n   */\n  theme?: Theme;\n  /**\n   * The map style to use, either `'default'` or `'satellite'`. The default map\n   * style is configurable with {@link AddressMinimapProps#defaultMapStyle}.\n   */\n  mapStyleMode?: MapStyleMode;\n  /**\n   * The map style to use for the default map style. Defaults to `['mapbox', 'streets-v11']`.\n   */\n  defaultMapStyle?: [string, string];\n}\n\n/**\n * `AddressMinimap` is a React component that displays a marker for confirmation purposes.\n *\n * Optionally, this marker is editable. When editable, the marker can be moved\n * around the map and the updated location is sent back to the Mapbox Contribute\n * workflow.\n *\n * The goal of `AddressMinimap` is to reduce delivery error in shipping and\n * local dispatching contexts.\n *\n * `AddressMinimap` expands to fill its container, and is hidden unless\n * {@link AddressMinimapProps#feature} and {@link AddressMinimapProps#show} are truthy.\n *\n * Internally, this wraps the [`<mapbox-address-minimap>`](https://docs.mapbox.com/mapbox-search-js/api/web/minimap/#mapboxaddressminimap) element.\n *\n * @class AddressMinimap\n * @param {AddressMinimapProps} props\n * @example\n * ```typescript\n * export function Component() {\n *   return (\n *     <AddressMinimap accessToken={<your access token here>}>\n *     </AddressMinimap>\n *   );\n * }\n * ```\n */\nexport function AddressMinimap(props: AddressMinimapProps): React.ReactElement {\n  const {\n    canAdjustMarker = false,\n    keepMarkerCentered = false,\n    markerAnchor = 'bottom',\n    onSaveMarkerLocation,\n\n    show = false,\n    accessToken,\n    feature = null,\n\n    satelliteToggle = false,\n    theme,\n    mapStyleMode = 'default',\n    defaultMapStyle = ['mapbox', 'streets-v11']\n  } = props;\n  const ref = useRef<MapboxAddressMinimap>();\n\n  // Update show.\n  useEffect(() => {\n    if (!ref.current) return;\n    if (show) {\n      ref.current.show();\n    } else {\n      ref.current.hide();\n    }\n  }, [ref.current, show]);\n\n  // Update theme.\n  useEffect(() => {\n    if (ref.current) ref.current.theme = theme;\n  }, [ref.current, theme]);\n\n  // Update feature.\n  useEffect(() => {\n    if (ref.current) ref.current.feature = show ? feature : null;\n  }, [ref.current, feature, show]);\n\n  // Update mapStyleMode.\n  useEffect(() => {\n    if (ref.current) ref.current.mapStyleMode = mapStyleMode;\n  }, [ref.current, mapStyleMode]);\n\n  // Update defaultMapStyle.\n  useEffect(() => {\n    if (ref.current) ref.current.defaultMapStyle = defaultMapStyle;\n  }, [ref.current, defaultMapStyle]);\n\n  // Update accessToken.\n  useEffect(() => {\n    if (ref.current) ref.current.accessToken = accessToken;\n  }, [ref.current, accessToken]);\n\n  // Update onSaveMarkerLocation callback\n  useEffect(() => {\n    if (ref.current) ref.current.onSaveMarkerLocation = onSaveMarkerLocation;\n  }, [ref.current, onSaveMarkerLocation]);\n\n  return (\n    <mapbox-address-minimap\n      ref={ref}\n      can-adjust-marker={canAdjustMarker}\n      keep-marker-centered={keepMarkerCentered}\n      marker-anchor={markerAnchor}\n      satellite-toggle={satelliteToggle}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { Evented } from '@mapbox/search-js-core';\n\n/**\n * A React hook to register an event listener on a Search JS Core Evented object.\n *\n * {@link Evented} is a base class that is inherited by {@link SearchSession}.\n */\nexport function useEvented<T, K extends keyof T>(\n  evented: Evented<T> | null,\n  eventName: K,\n  cb: (object: T[K]) => unknown\n): void {\n  const cbRef = useRef(cb);\n  useEffect(() => {\n    cbRef.current = cb;\n  });\n\n  useEffect(() => {\n    if (!evented) return;\n\n    const fn = (object?: T[K]) => cbRef.current(object);\n    evented.addEventListener(eventName, fn);\n\n    return () => {\n      evented.removeEventListener(eventName, fn);\n    };\n  }, [evented, eventName, cbRef]);\n}\n","import { useEffect, useMemo } from 'react';\nimport { AutofillOptions, MapboxAutofill } from '@mapbox/search-js-core';\n\nconst DEFAULTS = MapboxAutofill.defaults;\n\n/**\n * A React hook that returns a {@link MapboxAutofill} instance.\n *\n * @param {AutofillOptions} options\n * @param {string} options.accessToken\n * @see {@link MapboxAutofill}\n */\nexport function useMapboxAutofill(\n  options: Partial<{ accessToken: string } & AutofillOptions>\n): MapboxAutofill {\n  const autofill = useMemo(() => {\n    return new MapboxAutofill();\n  }, []);\n\n  useEffect(() => {\n    const { accessToken, ...restOptions } = options;\n    autofill.accessToken = accessToken;\n    autofill.defaults = {\n      ...DEFAULTS,\n      ...restOptions\n    };\n  }, [options]);\n\n  return autofill;\n}\n","import { useEffect, useMemo } from 'react';\nimport { Options, MapboxSearch } from '@mapbox/search-js-core';\n\nconst DEFAULTS = MapboxSearch.defaults;\n\n/**\n * A React hook that returns a {@link MapboxSearch} instance.\n *\n * @param {Options} options\n * @param {string} options.accessToken\n * @see {@link MapboxSearch}\n */\nexport function useMapboxSearch(\n  options: Partial<{ accessToken: string } & Options>\n): MapboxSearch {\n  const search = useMemo(() => {\n    return new MapboxSearch();\n  }, []);\n\n  useEffect(() => {\n    const { accessToken, ...restOptions } = options;\n    search.accessToken = accessToken;\n    search.defaults = {\n      ...DEFAULTS,\n      ...restOptions\n    };\n  }, [options]);\n\n  return search;\n}\n","import {\n  AutofillOptions,\n  AutofillRetrieveResponse,\n  AutofillSuggestion,\n  AutofillSuggestionResponse,\n  MapboxAutofill,\n  MapboxSearch,\n  Options,\n  RetrieveResponse,\n  SearchSession,\n  Suggestion,\n  SuggestionResponse\n} from '@mapbox/search-js-core';\nimport { useMemo } from 'react';\n\nexport type SearchSessionType = SearchSession<\n  Options,\n  Suggestion,\n  SuggestionResponse,\n  RetrieveResponse\n>;\n\nexport type AutofillSearchSessionType = SearchSession<\n  AutofillOptions,\n  AutofillSuggestion,\n  AutofillSuggestionResponse,\n  AutofillRetrieveResponse\n>;\n\nfunction useSearchSession(search: MapboxSearch): SearchSessionType;\nfunction useSearchSession(autofill: MapboxAutofill): AutofillSearchSessionType;\n\n/**\n * A React hook that returns a {@link SearchSession} instance.\n *\n * @param {MapboxSearch | MapboxAutofill} search\n * @returns {SearchSession}\n * @see {@link SearchSession}\n */\nfunction useSearchSession(\n  search: MapboxSearch | MapboxAutofill\n): SearchSessionType | AutofillSearchSessionType {\n  const searchSession = useMemo(() => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SearchSession(search as any);\n  }, [search]);\n\n  if (search instanceof MapboxSearch) {\n    return searchSession as SearchSessionType;\n  } else {\n    return searchSession as AutofillSearchSessionType;\n  }\n}\n\nexport { useSearchSession };\n","import { useMemo, useRef } from 'react';\n\nimport {\n  AddressConfirmOptions,\n  AddressConfirmShowResult,\n  confirmAddress\n} from '@mapbox/search-js-web';\n\ninterface UseConfirmAddressObject {\n  formRef: React.RefObject<HTMLFormElement>;\n  showConfirm: (\n    options?: Partial<AddressConfirmOptions>\n  ) => Promise<AddressConfirmShowResult>;\n}\n\n/**\n * A React hook that returns a form ref and a function to show the address confirmation modal\n *\n * @param {AddressConfirmOptions} optionsArg\n * @see {@link confirmAddress}\n */\nexport function useConfirmAddress(\n  optionsArg: AddressConfirmOptions = {}\n): UseConfirmAddressObject {\n  const formRef = useRef<HTMLFormElement>(null);\n  return useMemo(() => {\n    return {\n      formRef,\n      showConfirm: () => confirmAddress(formRef.current, optionsArg)\n    };\n  }, [formRef, optionsArg]);\n}\n"]},"metadata":{},"sourceType":"module"}